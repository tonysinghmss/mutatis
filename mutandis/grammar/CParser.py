# Generated from E:\PyWorkspace\mutatis\mutandis\grammar\C.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3|")
        buf.write("\u051b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\3\2\3\2\6\2\u00b6\n\2\r\2\16\2")
        buf.write("\u00b7\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00c0\n\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\5\2\u00d4\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\7\4\u00e3\n\4\f\4\16\4\u00e6\13\4")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00ef\n\5\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0113\n\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u011d\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\7\6\u012a\n\6\f\6\16\6\u012d\13\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\7\7\u0135\n\7\f\7\16\7\u0138\13\7\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0150\n\b\3\t\3\t\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n")
        buf.write("\u0161\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\7\13\u016f\n\13\f\13\16\13\u0172\13\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u017d\n\f\f\f")
        buf.write("\16\f\u0180\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7")
        buf.write("\r\u018b\n\r\f\r\16\r\u018e\13\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u019f\n\16\f\16\16\16\u01a2\13\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u01ad\n\17\f\17\16")
        buf.write("\17\u01b0\13\17\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u01b8")
        buf.write("\n\20\f\20\16\20\u01bb\13\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\7\21\u01c3\n\21\f\21\16\21\u01c6\13\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\7\22\u01ce\n\22\f\22\16\22\u01d1")
        buf.write("\13\22\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u01d9\n\23\f")
        buf.write("\23\16\23\u01dc\13\23\3\24\3\24\3\24\3\24\3\24\3\24\7")
        buf.write("\24\u01e4\n\24\f\24\16\24\u01e7\13\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u01ef\n\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u01f7\n\26\3\27\3\27\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\7\30\u0201\n\30\f\30\16\30\u0204\13\30\3\31\3")
        buf.write("\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0210")
        buf.write("\n\32\3\33\6\33\u0213\n\33\r\33\16\33\u0214\3\34\6\34")
        buf.write("\u0218\n\34\r\34\16\34\u0219\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u0221\n\35\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u0229")
        buf.write("\n\36\f\36\16\36\u022c\13\36\3\37\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u0233\n\37\3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\5!\u0246\n!\3!\3!\7!\u024a\n!\f!\16!\u024d")
        buf.write("\13!\3\"\3\"\5\"\u0251\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\5\"\u025a\n\"\3#\3#\3$\3$\3$\3$\3$\7$\u0263\n$\f$\16")
        buf.write("$\u0266\13$\3%\3%\5%\u026a\n%\3%\3%\3%\5%\u026f\n%\3&")
        buf.write("\3&\5&\u0273\n&\3&\3&\5&\u0277\n&\5&\u0279\n&\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\7\'\u0281\n\'\f\'\16\'\u0284\13\'\3(")
        buf.write("\3(\5(\u0288\n(\3(\3(\5(\u028c\n(\3)\3)\5)\u0290\n)\3")
        buf.write(")\3)\3)\3)\3)\3)\5)\u0298\n)\3)\3)\3)\3)\3)\3)\3)\5)\u02a1")
        buf.write("\n)\3*\3*\3*\3*\3*\3*\7*\u02a9\n*\f*\16*\u02ac\13*\3+")
        buf.write("\3+\3+\3+\3+\5+\u02b3\n+\3,\3,\3-\3-\3-\3-\3-\3.\3.\3")
        buf.write("/\3/\3/\3/\3/\3/\5/\u02c4\n/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u02d0\n\60\3\61\5\61\u02d3")
        buf.write("\n\61\3\61\3\61\7\61\u02d7\n\61\f\61\16\61\u02da\13\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\5\62\u02e7\n\62\3\62\3\62\3\62\3\62\5\62\u02ed\n\62\3")
        buf.write("\62\3\62\3\62\5\62\u02f2\n\62\3\62\5\62\u02f5\n\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u02fc\n\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62")
        buf.write("\u030b\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\5\62\u0317\n\62\3\62\7\62\u031a\n\62\f\62\16")
        buf.write("\62\u031d\13\62\3\63\3\63\3\63\6\63\u0322\n\63\r\63\16")
        buf.write("\63\u0323\3\63\3\63\5\63\u0328\n\63\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\7\65\u0334\n\65\f\65\16")
        buf.write("\65\u0337\13\65\3\65\5\65\u033a\n\65\3\66\3\66\3\66\5")
        buf.write("\66\u033f\n\66\3\66\5\66\u0342\n\66\3\66\5\66\u0345\n")
        buf.write("\66\3\67\3\67\3\67\3\67\3\67\7\67\u034c\n\67\f\67\16\67")
        buf.write("\u034f\13\67\38\38\58\u0353\n8\38\38\58\u0357\n8\38\3")
        buf.write("8\38\58\u035c\n8\38\38\58\u0360\n8\38\58\u0363\n8\39\3")
        buf.write("9\39\39\39\79\u036a\n9\f9\169\u036d\139\3:\3:\3:\3:\3")
        buf.write(":\5:\u0374\n:\3;\3;\3;\3;\3;\3;\7;\u037c\n;\f;\16;\u037f")
        buf.write("\13;\3<\3<\3<\3<\3<\5<\u0386\n<\5<\u0388\n<\3=\3=\3=\3")
        buf.write("=\3=\3=\7=\u0390\n=\f=\16=\u0393\13=\3>\3>\5>\u0397\n")
        buf.write(">\3?\3?\5?\u039b\n?\3?\3?\7?\u039f\n?\f?\16?\u03a2\13")
        buf.write("?\5?\u03a4\n?\3@\3@\3@\3@\3@\7@\u03ab\n@\f@\16@\u03ae")
        buf.write("\13@\3@\3@\5@\u03b2\n@\3@\5@\u03b5\n@\3@\3@\3@\3@\5@\u03bb")
        buf.write("\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u03cb")
        buf.write("\n@\3@\3@\7@\u03cf\n@\f@\16@\u03d2\13@\5@\u03d4\n@\3@")
        buf.write("\3@\3@\5@\u03d9\n@\3@\5@\u03dc\n@\3@\3@\3@\3@\3@\5@\u03e3")
        buf.write("\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\5@\u03f6\n@\3@\3@\7@\u03fa\n@\f@\16@\u03fd\13@\7@\u03ff")
        buf.write("\n@\f@\16@\u0402\13@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3B")
        buf.write("\3B\5B\u0410\nB\3C\3C\5C\u0414\nC\3C\3C\3C\3C\3C\5C\u041b")
        buf.write("\nC\3C\7C\u041e\nC\fC\16C\u0421\13C\3D\3D\3D\3E\3E\3E")
        buf.write("\3E\3E\7E\u042b\nE\fE\16E\u042e\13E\3F\3F\3F\3F\3F\3F")
        buf.write("\5F\u0436\nF\3G\3G\3G\3G\3G\6G\u043d\nG\rG\16G\u043e\3")
        buf.write("G\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\7H\u0450\n")
        buf.write("H\fH\16H\u0453\13H\5H\u0455\nH\3H\3H\3H\3H\7H\u045b\n")
        buf.write("H\fH\16H\u045e\13H\5H\u0460\nH\7H\u0462\nH\fH\16H\u0465")
        buf.write("\13H\3H\3H\5H\u0469\nH\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\5I\u0476\nI\3J\3J\5J\u047a\nJ\3J\3J\3K\3K\3K\3K\3K\7")
        buf.write("K\u0483\nK\fK\16K\u0486\13K\3L\3L\5L\u048a\nL\3M\5M\u048d")
        buf.write("\nM\3M\3M\3N\3N\3N\3N\3N\3N\3N\5N\u0498\nN\3N\3N\3N\3")
        buf.write("N\3N\3N\5N\u04a0\nN\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u04b6\nO\3P\3P\3P\5P\u04bb")
        buf.write("\nP\3P\3P\5P\u04bf\nP\3P\5P\u04c2\nP\3P\3P\5P\u04c6\n")
        buf.write("P\3P\3P\5P\u04ca\nP\5P\u04cc\nP\3Q\3Q\3Q\3Q\5Q\u04d2\n")
        buf.write("Q\3R\3R\3R\3R\3R\3R\7R\u04da\nR\fR\16R\u04dd\13R\3S\3")
        buf.write("S\3S\3S\3S\3S\3S\3S\3S\5S\u04e8\nS\3S\3S\3S\3S\3S\5S\u04ef")
        buf.write("\nS\3T\5T\u04f2\nT\3T\3T\3U\3U\3U\3U\3U\7U\u04fb\nU\f")
        buf.write("U\16U\u04fe\13U\3V\3V\3V\3V\5V\u0504\nV\3W\5W\u0507\n")
        buf.write("W\3W\3W\5W\u050b\nW\3W\3W\3X\3X\3X\3X\3X\7X\u0514\nX\f")
        buf.write("X\16X\u0517\13X\3Y\3Y\3Y\2 \6\n\f\24\26\30\32\34\36 \"")
        buf.write("$&.:@FLRbptx~\u0084\u0088\u0094\u00a2\u00a8\u00aeZ\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\2\17\7\2IIKKMMPPUV\3\2[e\b\2")
        buf.write("\21\21\34\34$$**--<<\n\2\6\b\24\24\31\31\35\35\"#\'(/")
        buf.write("\60\66\67\3\2\6\b\4\2++..\6\2\25\25%%\61\61\65\65\5\2")
        buf.write("\n\13!!::\4\2=>ZZ\3\2=>\4\2\r\r\17\17\4\2\20\20\61\61")
        buf.write("\3\2ot\2\u0590\2\u00d3\3\2\2\2\4\u00d5\3\2\2\2\6\u00dc")
        buf.write("\3\2\2\2\b\u00ee\3\2\2\2\n\u0112\3\2\2\2\f\u012e\3\2\2")
        buf.write("\2\16\u014f\3\2\2\2\20\u0151\3\2\2\2\22\u0160\3\2\2\2")
        buf.write("\24\u0162\3\2\2\2\26\u0173\3\2\2\2\30\u0181\3\2\2\2\32")
        buf.write("\u018f\3\2\2\2\34\u01a3\3\2\2\2\36\u01b1\3\2\2\2 \u01bc")
        buf.write("\3\2\2\2\"\u01c7\3\2\2\2$\u01d2\3\2\2\2&\u01dd\3\2\2\2")
        buf.write("(\u01e8\3\2\2\2*\u01f6\3\2\2\2,\u01f8\3\2\2\2.\u01fa\3")
        buf.write("\2\2\2\60\u0205\3\2\2\2\62\u020f\3\2\2\2\64\u0212\3\2")
        buf.write("\2\2\66\u0217\3\2\2\28\u0220\3\2\2\2:\u0222\3\2\2\2<\u0232")
        buf.write("\3\2\2\2>\u0234\3\2\2\2@\u0245\3\2\2\2B\u0259\3\2\2\2")
        buf.write("D\u025b\3\2\2\2F\u025d\3\2\2\2H\u026e\3\2\2\2J\u0278\3")
        buf.write("\2\2\2L\u027a\3\2\2\2N\u028b\3\2\2\2P\u02a0\3\2\2\2R\u02a2")
        buf.write("\3\2\2\2T\u02b2\3\2\2\2V\u02b4\3\2\2\2X\u02b6\3\2\2\2")
        buf.write("Z\u02bb\3\2\2\2\\\u02c3\3\2\2\2^\u02cf\3\2\2\2`\u02d2")
        buf.write("\3\2\2\2b\u02ec\3\2\2\2d\u0327\3\2\2\2f\u0329\3\2\2\2")
        buf.write("h\u0339\3\2\2\2j\u0344\3\2\2\2l\u034d\3\2\2\2n\u0362\3")
        buf.write("\2\2\2p\u0364\3\2\2\2r\u0373\3\2\2\2t\u0375\3\2\2\2v\u0387")
        buf.write("\3\2\2\2x\u0389\3\2\2\2z\u0394\3\2\2\2|\u03a3\3\2\2\2")
        buf.write("~\u03d3\3\2\2\2\u0080\u0403\3\2\2\2\u0082\u040f\3\2\2")
        buf.write("\2\u0084\u0411\3\2\2\2\u0086\u0422\3\2\2\2\u0088\u0425")
        buf.write("\3\2\2\2\u008a\u0435\3\2\2\2\u008c\u0437\3\2\2\2\u008e")
        buf.write("\u0468\3\2\2\2\u0090\u0475\3\2\2\2\u0092\u0477\3\2\2\2")
        buf.write("\u0094\u047d\3\2\2\2\u0096\u0489\3\2\2\2\u0098\u048c\3")
        buf.write("\2\2\2\u009a\u049f\3\2\2\2\u009c\u04b5\3\2\2\2\u009e\u04cb")
        buf.write("\3\2\2\2\u00a0\u04d1\3\2\2\2\u00a2\u04d3\3\2\2\2\u00a4")
        buf.write("\u04ee\3\2\2\2\u00a6\u04f1\3\2\2\2\u00a8\u04f5\3\2\2\2")
        buf.write("\u00aa\u0503\3\2\2\2\u00ac\u0506\3\2\2\2\u00ae\u050e\3")
        buf.write("\2\2\2\u00b0\u0518\3\2\2\2\u00b2\u00d4\7k\2\2\u00b3\u00d4")
        buf.write("\7l\2\2\u00b4\u00b6\7n\2\2\u00b5\u00b4\3\2\2\2\u00b6\u00b7")
        buf.write("\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8")
        buf.write("\u00d4\3\2\2\2\u00b9\u00ba\7=\2\2\u00ba\u00bb\5.\30\2")
        buf.write("\u00bb\u00bc\7>\2\2\u00bc\u00d4\3\2\2\2\u00bd\u00d4\5")
        buf.write("\4\3\2\u00be\u00c0\7\3\2\2\u00bf\u00be\3\2\2\2\u00bf\u00c0")
        buf.write("\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c2\7=\2\2\u00c2")
        buf.write("\u00c3\5\u0092J\2\u00c3\u00c4\7>\2\2\u00c4\u00d4\3\2\2")
        buf.write("\2\u00c5\u00c6\7\4\2\2\u00c6\u00c7\7=\2\2\u00c7\u00c8")
        buf.write("\5\16\b\2\u00c8\u00c9\7Z\2\2\u00c9\u00ca\5z>\2\u00ca\u00cb")
        buf.write("\7>\2\2\u00cb\u00d4\3\2\2\2\u00cc\u00cd\7\5\2\2\u00cd")
        buf.write("\u00ce\7=\2\2\u00ce\u00cf\5z>\2\u00cf\u00d0\7Z\2\2\u00d0")
        buf.write("\u00d1\5\16\b\2\u00d1\u00d2\7>\2\2\u00d2\u00d4\3\2\2\2")
        buf.write("\u00d3\u00b2\3\2\2\2\u00d3\u00b3\3\2\2\2\u00d3\u00b5\3")
        buf.write("\2\2\2\u00d3\u00b9\3\2\2\2\u00d3\u00bd\3\2\2\2\u00d3\u00bf")
        buf.write("\3\2\2\2\u00d3\u00c5\3\2\2\2\u00d3\u00cc\3\2\2\2\u00d4")
        buf.write("\3\3\2\2\2\u00d5\u00d6\78\2\2\u00d6\u00d7\7=\2\2\u00d7")
        buf.write("\u00d8\5*\26\2\u00d8\u00d9\7Z\2\2\u00d9\u00da\5\6\4\2")
        buf.write("\u00da\u00db\7>\2\2\u00db\5\3\2\2\2\u00dc\u00dd\b\4\1")
        buf.write("\2\u00dd\u00de\5\b\5\2\u00de\u00e4\3\2\2\2\u00df\u00e0")
        buf.write("\f\3\2\2\u00e0\u00e1\7Z\2\2\u00e1\u00e3\5\b\5\2\u00e2")
        buf.write("\u00df\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2")
        buf.write("\u00e4\u00e5\3\2\2\2\u00e5\7\3\2\2\2\u00e6\u00e4\3\2\2")
        buf.write("\2\u00e7\u00e8\5z>\2\u00e8\u00e9\7X\2\2\u00e9\u00ea\5")
        buf.write("*\26\2\u00ea\u00ef\3\2\2\2\u00eb\u00ec\7\27\2\2\u00ec")
        buf.write("\u00ed\7X\2\2\u00ed\u00ef\5*\26\2\u00ee\u00e7\3\2\2\2")
        buf.write("\u00ee\u00eb\3\2\2\2\u00ef\t\3\2\2\2\u00f0\u00f1\b\6\1")
        buf.write("\2\u00f1\u0113\5\2\2\2\u00f2\u00f3\7=\2\2\u00f3\u00f4")
        buf.write("\5z>\2\u00f4\u00f5\7>\2\2\u00f5\u00f6\7A\2\2\u00f6\u00f7")
        buf.write("\5\u0084C\2\u00f7\u00f8\7B\2\2\u00f8\u0113\3\2\2\2\u00f9")
        buf.write("\u00fa\7=\2\2\u00fa\u00fb\5z>\2\u00fb\u00fc\7>\2\2\u00fc")
        buf.write("\u00fd\7A\2\2\u00fd\u00fe\5\u0084C\2\u00fe\u00ff\7Z\2")
        buf.write("\2\u00ff\u0100\7B\2\2\u0100\u0113\3\2\2\2\u0101\u0102")
        buf.write("\7\3\2\2\u0102\u0103\7=\2\2\u0103\u0104\5z>\2\u0104\u0105")
        buf.write("\7>\2\2\u0105\u0106\7A\2\2\u0106\u0107\5\u0084C\2\u0107")
        buf.write("\u0108\7B\2\2\u0108\u0113\3\2\2\2\u0109\u010a\7\3\2\2")
        buf.write("\u010a\u010b\7=\2\2\u010b\u010c\5z>\2\u010c\u010d\7>\2")
        buf.write("\2\u010d\u010e\7A\2\2\u010e\u010f\5\u0084C\2\u010f\u0110")
        buf.write("\7Z\2\2\u0110\u0111\7B\2\2\u0111\u0113\3\2\2\2\u0112\u00f0")
        buf.write("\3\2\2\2\u0112\u00f2\3\2\2\2\u0112\u00f9\3\2\2\2\u0112")
        buf.write("\u0101\3\2\2\2\u0112\u0109\3\2\2\2\u0113\u012b\3\2\2\2")
        buf.write("\u0114\u0115\f\f\2\2\u0115\u0116\7?\2\2\u0116\u0117\5")
        buf.write(".\30\2\u0117\u0118\7@\2\2\u0118\u012a\3\2\2\2\u0119\u011a")
        buf.write("\f\13\2\2\u011a\u011c\7=\2\2\u011b\u011d\5\f\7\2\u011c")
        buf.write("\u011b\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u012a\7>\2\2\u011f\u0120\f\n\2\2\u0120\u0121\7")
        buf.write("i\2\2\u0121\u012a\7k\2\2\u0122\u0123\f\t\2\2\u0123\u0124")
        buf.write("\7h\2\2\u0124\u012a\7k\2\2\u0125\u0126\f\b\2\2\u0126\u012a")
        buf.write("\7J\2\2\u0127\u0128\f\7\2\2\u0128\u012a\7L\2\2\u0129\u0114")
        buf.write("\3\2\2\2\u0129\u0119\3\2\2\2\u0129\u011f\3\2\2\2\u0129")
        buf.write("\u0122\3\2\2\2\u0129\u0125\3\2\2\2\u0129\u0127\3\2\2\2")
        buf.write("\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3")
        buf.write("\2\2\2\u012c\13\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u012f")
        buf.write("\b\7\1\2\u012f\u0130\5*\26\2\u0130\u0136\3\2\2\2\u0131")
        buf.write("\u0132\f\3\2\2\u0132\u0133\7Z\2\2\u0133\u0135\5*\26\2")
        buf.write("\u0134\u0131\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134\3")
        buf.write("\2\2\2\u0136\u0137\3\2\2\2\u0137\r\3\2\2\2\u0138\u0136")
        buf.write("\3\2\2\2\u0139\u0150\5\n\6\2\u013a\u013b\7J\2\2\u013b")
        buf.write("\u0150\5\16\b\2\u013c\u013d\7L\2\2\u013d\u0150\5\16\b")
        buf.write("\2\u013e\u013f\5\20\t\2\u013f\u0140\5\22\n\2\u0140\u0150")
        buf.write("\3\2\2\2\u0141\u0142\7)\2\2\u0142\u0150\5\16\b\2\u0143")
        buf.write("\u0144\7)\2\2\u0144\u0145\7=\2\2\u0145\u0146\5z>\2\u0146")
        buf.write("\u0147\7>\2\2\u0147\u0150\3\2\2\2\u0148\u0149\7\64\2\2")
        buf.write("\u0149\u014a\7=\2\2\u014a\u014b\5z>\2\u014b\u014c\7>\2")
        buf.write("\2\u014c\u0150\3\2\2\2\u014d\u014e\7R\2\2\u014e\u0150")
        buf.write("\7k\2\2\u014f\u0139\3\2\2\2\u014f\u013a\3\2\2\2\u014f")
        buf.write("\u013c\3\2\2\2\u014f\u013e\3\2\2\2\u014f\u0141\3\2\2\2")
        buf.write("\u014f\u0143\3\2\2\2\u014f\u0148\3\2\2\2\u014f\u014d\3")
        buf.write("\2\2\2\u0150\17\3\2\2\2\u0151\u0152\t\2\2\2\u0152\21\3")
        buf.write("\2\2\2\u0153\u0154\7=\2\2\u0154\u0155\5z>\2\u0155\u0156")
        buf.write("\7>\2\2\u0156\u0157\5\22\n\2\u0157\u0161\3\2\2\2\u0158")
        buf.write("\u0159\7\3\2\2\u0159\u015a\7=\2\2\u015a\u015b\5z>\2\u015b")
        buf.write("\u015c\7>\2\2\u015c\u015d\5\22\n\2\u015d\u0161\3\2\2\2")
        buf.write("\u015e\u0161\5\16\b\2\u015f\u0161\7m\2\2\u0160\u0153\3")
        buf.write("\2\2\2\u0160\u0158\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u015f")
        buf.write("\3\2\2\2\u0161\23\3\2\2\2\u0162\u0163\b\13\1\2\u0163\u0164")
        buf.write("\5\22\n\2\u0164\u0170\3\2\2\2\u0165\u0166\f\5\2\2\u0166")
        buf.write("\u0167\7M\2\2\u0167\u016f\5\22\n\2\u0168\u0169\f\4\2\2")
        buf.write("\u0169\u016a\7N\2\2\u016a\u016f\5\22\n\2\u016b\u016c\f")
        buf.write("\3\2\2\u016c\u016d\7O\2\2\u016d\u016f\5\22\n\2\u016e\u0165")
        buf.write("\3\2\2\2\u016e\u0168\3\2\2\2\u016e\u016b\3\2\2\2\u016f")
        buf.write("\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\25\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0174\b\f")
        buf.write("\1\2\u0174\u0175\5\24\13\2\u0175\u017e\3\2\2\2\u0176\u0177")
        buf.write("\f\4\2\2\u0177\u0178\7I\2\2\u0178\u017d\5\24\13\2\u0179")
        buf.write("\u017a\f\3\2\2\u017a\u017b\7K\2\2\u017b\u017d\5\24\13")
        buf.write("\2\u017c\u0176\3\2\2\2\u017c\u0179\3\2\2\2\u017d\u0180")
        buf.write("\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f")
        buf.write("\27\3\2\2\2\u0180\u017e\3\2\2\2\u0181\u0182\b\r\1\2\u0182")
        buf.write("\u0183\5\26\f\2\u0183\u018c\3\2\2\2\u0184\u0185\f\4\2")
        buf.write("\2\u0185\u0186\7G\2\2\u0186\u018b\5\26\f\2\u0187\u0188")
        buf.write("\f\3\2\2\u0188\u0189\7H\2\2\u0189\u018b\5\26\f\2\u018a")
        buf.write("\u0184\3\2\2\2\u018a\u0187\3\2\2\2\u018b\u018e\3\2\2\2")
        buf.write("\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d\31\3\2")
        buf.write("\2\2\u018e\u018c\3\2\2\2\u018f\u0190\b\16\1\2\u0190\u0191")
        buf.write("\5\30\r\2\u0191\u01a0\3\2\2\2\u0192\u0193\f\6\2\2\u0193")
        buf.write("\u0194\7C\2\2\u0194\u019f\5\30\r\2\u0195\u0196\f\5\2\2")
        buf.write("\u0196\u0197\7E\2\2\u0197\u019f\5\30\r\2\u0198\u0199\f")
        buf.write("\4\2\2\u0199\u019a\7D\2\2\u019a\u019f\5\30\r\2\u019b\u019c")
        buf.write("\f\3\2\2\u019c\u019d\7F\2\2\u019d\u019f\5\30\r\2\u019e")
        buf.write("\u0192\3\2\2\2\u019e\u0195\3\2\2\2\u019e\u0198\3\2\2\2")
        buf.write("\u019e\u019b\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\33\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u01a4\b\17\1\2\u01a4\u01a5\5\32\16\2\u01a5")
        buf.write("\u01ae\3\2\2\2\u01a6\u01a7\f\4\2\2\u01a7\u01a8\7f\2\2")
        buf.write("\u01a8\u01ad\5\32\16\2\u01a9\u01aa\f\3\2\2\u01aa\u01ab")
        buf.write("\7g\2\2\u01ab\u01ad\5\32\16\2\u01ac\u01a6\3\2\2\2\u01ac")
        buf.write("\u01a9\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2")
        buf.write("\u01ae\u01af\3\2\2\2\u01af\35\3\2\2\2\u01b0\u01ae\3\2")
        buf.write("\2\2\u01b1\u01b2\b\20\1\2\u01b2\u01b3\5\34\17\2\u01b3")
        buf.write("\u01b9\3\2\2\2\u01b4\u01b5\f\3\2\2\u01b5\u01b6\7P\2\2")
        buf.write("\u01b6\u01b8\5\34\17\2\u01b7\u01b4\3\2\2\2\u01b8\u01bb")
        buf.write("\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\37\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01bd\b\21\1\2\u01bd")
        buf.write("\u01be\5\36\20\2\u01be\u01c4\3\2\2\2\u01bf\u01c0\f\3\2")
        buf.write("\2\u01c0\u01c1\7T\2\2\u01c1\u01c3\5\36\20\2\u01c2\u01bf")
        buf.write("\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4")
        buf.write("\u01c5\3\2\2\2\u01c5!\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7")
        buf.write("\u01c8\b\22\1\2\u01c8\u01c9\5 \21\2\u01c9\u01cf\3\2\2")
        buf.write("\2\u01ca\u01cb\f\3\2\2\u01cb\u01cc\7Q\2\2\u01cc\u01ce")
        buf.write("\5 \21\2\u01cd\u01ca\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0#\3\2\2\2\u01d1")
        buf.write("\u01cf\3\2\2\2\u01d2\u01d3\b\23\1\2\u01d3\u01d4\5\"\22")
        buf.write("\2\u01d4\u01da\3\2\2\2\u01d5\u01d6\f\3\2\2\u01d6\u01d7")
        buf.write("\7R\2\2\u01d7\u01d9\5\"\22\2\u01d8\u01d5\3\2\2\2\u01d9")
        buf.write("\u01dc\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2")
        buf.write("\u01db%\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01de\b\24\1")
        buf.write("\2\u01de\u01df\5$\23\2\u01df\u01e5\3\2\2\2\u01e0\u01e1")
        buf.write("\f\3\2\2\u01e1\u01e2\7S\2\2\u01e2\u01e4\5$\23\2\u01e3")
        buf.write("\u01e0\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2")
        buf.write("\u01e5\u01e6\3\2\2\2\u01e6\'\3\2\2\2\u01e7\u01e5\3\2\2")
        buf.write("\2\u01e8\u01ee\5&\24\2\u01e9\u01ea\7W\2\2\u01ea\u01eb")
        buf.write("\5.\30\2\u01eb\u01ec\7X\2\2\u01ec\u01ed\5(\25\2\u01ed")
        buf.write("\u01ef\3\2\2\2\u01ee\u01e9\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef)\3\2\2\2\u01f0\u01f7\5(\25\2\u01f1\u01f2\5\16\b")
        buf.write("\2\u01f2\u01f3\5,\27\2\u01f3\u01f4\5*\26\2\u01f4\u01f7")
        buf.write("\3\2\2\2\u01f5\u01f7\7m\2\2\u01f6\u01f0\3\2\2\2\u01f6")
        buf.write("\u01f1\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7+\3\2\2\2\u01f8")
        buf.write("\u01f9\t\3\2\2\u01f9-\3\2\2\2\u01fa\u01fb\b\30\1\2\u01fb")
        buf.write("\u01fc\5*\26\2\u01fc\u0202\3\2\2\2\u01fd\u01fe\f\3\2\2")
        buf.write("\u01fe\u01ff\7Z\2\2\u01ff\u0201\5*\26\2\u0200\u01fd\3")
        buf.write("\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203")
        buf.write("\3\2\2\2\u0203/\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u0206")
        buf.write("\5(\25\2\u0206\61\3\2\2\2\u0207\u0208\5\64\33\2\u0208")
        buf.write("\u0209\5:\36\2\u0209\u020a\7Y\2\2\u020a\u0210\3\2\2\2")
        buf.write("\u020b\u020c\5\64\33\2\u020c\u020d\7Y\2\2\u020d\u0210")
        buf.write("\3\2\2\2\u020e\u0210\5\u008cG\2\u020f\u0207\3\2\2\2\u020f")
        buf.write("\u020b\3\2\2\2\u020f\u020e\3\2\2\2\u0210\63\3\2\2\2\u0211")
        buf.write("\u0213\58\35\2\u0212\u0211\3\2\2\2\u0213\u0214\3\2\2\2")
        buf.write("\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\65\3\2")
        buf.write("\2\2\u0216\u0218\58\35\2\u0217\u0216\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a")
        buf.write("\67\3\2\2\2\u021b\u0221\5> \2\u021c\u0221\5@!\2\u021d")
        buf.write("\u0221\5Z.\2\u021e\u0221\5\\/\2\u021f\u0221\5^\60\2\u0220")
        buf.write("\u021b\3\2\2\2\u0220\u021c\3\2\2\2\u0220\u021d\3\2\2\2")
        buf.write("\u0220\u021e\3\2\2\2\u0220\u021f\3\2\2\2\u02219\3\2\2")
        buf.write("\2\u0222\u0223\b\36\1\2\u0223\u0224\5<\37\2\u0224\u022a")
        buf.write("\3\2\2\2\u0225\u0226\f\3\2\2\u0226\u0227\7Z\2\2\u0227")
        buf.write("\u0229\5<\37\2\u0228\u0225\3\2\2\2\u0229\u022c\3\2\2\2")
        buf.write("\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b;\3\2\2")
        buf.write("\2\u022c\u022a\3\2\2\2\u022d\u0233\5`\61\2\u022e\u022f")
        buf.write("\5`\61\2\u022f\u0230\7[\2\2\u0230\u0231\5\u0082B\2\u0231")
        buf.write("\u0233\3\2\2\2\u0232\u022d\3\2\2\2\u0232\u022e\3\2\2\2")
        buf.write("\u0233=\3\2\2\2\u0234\u0235\t\4\2\2\u0235?\3\2\2\2\u0236")
        buf.write("\u0237\b!\1\2\u0237\u0246\t\5\2\2\u0238\u0239\7\3\2\2")
        buf.write("\u0239\u023a\7=\2\2\u023a\u023b\t\6\2\2\u023b\u0246\7")
        buf.write(">\2\2\u023c\u0246\5X-\2\u023d\u0246\5B\"\2\u023e\u0246")
        buf.write("\5P)\2\u023f\u0246\5\u0080A\2\u0240\u0241\7\t\2\2\u0241")
        buf.write("\u0242\7=\2\2\u0242\u0243\5\60\31\2\u0243\u0244\7>\2\2")
        buf.write("\u0244\u0246\3\2\2\2\u0245\u0236\3\2\2\2\u0245\u0238\3")
        buf.write("\2\2\2\u0245\u023c\3\2\2\2\u0245\u023d\3\2\2\2\u0245\u023e")
        buf.write("\3\2\2\2\u0245\u023f\3\2\2\2\u0245\u0240\3\2\2\2\u0246")
        buf.write("\u024b\3\2\2\2\u0247\u0248\f\3\2\2\u0248\u024a\5n8\2\u0249")
        buf.write("\u0247\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2")
        buf.write("\u024b\u024c\3\2\2\2\u024cA\3\2\2\2\u024d\u024b\3\2\2")
        buf.write("\2\u024e\u0250\5D#\2\u024f\u0251\7k\2\2\u0250\u024f\3")
        buf.write("\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253")
        buf.write("\7A\2\2\u0253\u0254\5F$\2\u0254\u0255\7B\2\2\u0255\u025a")
        buf.write("\3\2\2\2\u0256\u0257\5D#\2\u0257\u0258\7k\2\2\u0258\u025a")
        buf.write("\3\2\2\2\u0259\u024e\3\2\2\2\u0259\u0256\3\2\2\2\u025a")
        buf.write("C\3\2\2\2\u025b\u025c\t\7\2\2\u025cE\3\2\2\2\u025d\u025e")
        buf.write("\b$\1\2\u025e\u025f\5H%\2\u025f\u0264\3\2\2\2\u0260\u0261")
        buf.write("\f\3\2\2\u0261\u0263\5H%\2\u0262\u0260\3\2\2\2\u0263\u0266")
        buf.write("\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write("G\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u0269\5J&\2\u0268")
        buf.write("\u026a\5L\'\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2")
        buf.write("\u026a\u026b\3\2\2\2\u026b\u026c\7Y\2\2\u026c\u026f\3")
        buf.write("\2\2\2\u026d\u026f\5\u008cG\2\u026e\u0267\3\2\2\2\u026e")
        buf.write("\u026d\3\2\2\2\u026fI\3\2\2\2\u0270\u0272\5@!\2\u0271")
        buf.write("\u0273\5J&\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0279\3\2\2\2\u0274\u0276\5Z.\2\u0275\u0277\5J&\2\u0276")
        buf.write("\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\3\2\2\2")
        buf.write("\u0278\u0270\3\2\2\2\u0278\u0274\3\2\2\2\u0279K\3\2\2")
        buf.write("\2\u027a\u027b\b\'\1\2\u027b\u027c\5N(\2\u027c\u0282\3")
        buf.write("\2\2\2\u027d\u027e\f\3\2\2\u027e\u027f\7Z\2\2\u027f\u0281")
        buf.write("\5N(\2\u0280\u027d\3\2\2\2\u0281\u0284\3\2\2\2\u0282\u0280")
        buf.write("\3\2\2\2\u0282\u0283\3\2\2\2\u0283M\3\2\2\2\u0284\u0282")
        buf.write("\3\2\2\2\u0285\u028c\5`\61\2\u0286\u0288\5`\61\2\u0287")
        buf.write("\u0286\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289\3\2\2\2")
        buf.write("\u0289\u028a\7X\2\2\u028a\u028c\5\60\31\2\u028b\u0285")
        buf.write("\3\2\2\2\u028b\u0287\3\2\2\2\u028cO\3\2\2\2\u028d\u028f")
        buf.write("\7\33\2\2\u028e\u0290\7k\2\2\u028f\u028e\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\7A\2\2")
        buf.write("\u0292\u0293\5R*\2\u0293\u0294\7B\2\2\u0294\u02a1\3\2")
        buf.write("\2\2\u0295\u0297\7\33\2\2\u0296\u0298\7k\2\2\u0297\u0296")
        buf.write("\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u029a\7A\2\2\u029a\u029b\5R*\2\u029b\u029c\7Z\2\2\u029c")
        buf.write("\u029d\7B\2\2\u029d\u02a1\3\2\2\2\u029e\u029f\7\33\2\2")
        buf.write("\u029f\u02a1\7k\2\2\u02a0\u028d\3\2\2\2\u02a0\u0295\3")
        buf.write("\2\2\2\u02a0\u029e\3\2\2\2\u02a1Q\3\2\2\2\u02a2\u02a3")
        buf.write("\b*\1\2\u02a3\u02a4\5T+\2\u02a4\u02aa\3\2\2\2\u02a5\u02a6")
        buf.write("\f\3\2\2\u02a6\u02a7\7Z\2\2\u02a7\u02a9\5T+\2\u02a8\u02a5")
        buf.write("\3\2\2\2\u02a9\u02ac\3\2\2\2\u02aa\u02a8\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02abS\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ad")
        buf.write("\u02b3\5V,\2\u02ae\u02af\5V,\2\u02af\u02b0\7[\2\2\u02b0")
        buf.write("\u02b1\5\60\31\2\u02b1\u02b3\3\2\2\2\u02b2\u02ad\3\2\2")
        buf.write("\2\u02b2\u02ae\3\2\2\2\u02b3U\3\2\2\2\u02b4\u02b5\7k\2")
        buf.write("\2\u02b5W\3\2\2\2\u02b6\u02b7\7\65\2\2\u02b7\u02b8\7=")
        buf.write("\2\2\u02b8\u02b9\5z>\2\u02b9\u02ba\7>\2\2\u02baY\3\2\2")
        buf.write("\2\u02bb\u02bc\t\b\2\2\u02bc[\3\2\2\2\u02bd\u02c4\t\t")
        buf.write("\2\2\u02be\u02c4\5f\64\2\u02bf\u02c0\7\f\2\2\u02c0\u02c1")
        buf.write("\7=\2\2\u02c1\u02c2\7k\2\2\u02c2\u02c4\7>\2\2\u02c3\u02bd")
        buf.write("\3\2\2\2\u02c3\u02be\3\2\2\2\u02c3\u02bf\3\2\2\2\u02c4")
        buf.write("]\3\2\2\2\u02c5\u02c6\7\63\2\2\u02c6\u02c7\7=\2\2\u02c7")
        buf.write("\u02c8\5z>\2\u02c8\u02c9\7>\2\2\u02c9\u02d0\3\2\2\2\u02ca")
        buf.write("\u02cb\7\63\2\2\u02cb\u02cc\7=\2\2\u02cc\u02cd\5\60\31")
        buf.write("\2\u02cd\u02ce\7>\2\2\u02ce\u02d0\3\2\2\2\u02cf\u02c5")
        buf.write("\3\2\2\2\u02cf\u02ca\3\2\2\2\u02d0_\3\2\2\2\u02d1\u02d3")
        buf.write("\5n8\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02d8\5b\62\2\u02d5\u02d7\5d\63\2\u02d6")
        buf.write("\u02d5\3\2\2\2\u02d7\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9a\3\2\2\2\u02da\u02d8\3\2\2")
        buf.write("\2\u02db\u02dc\b\62\1\2\u02dc\u02ed\7k\2\2\u02dd\u02de")
        buf.write("\7=\2\2\u02de\u02df\5`\61\2\u02df\u02e0\7>\2\2\u02e0\u02ed")
        buf.write("\3\2\2\2\u02e1\u02e2\7k\2\2\u02e2\u02e3\7X\2\2\u02e3\u02ed")
        buf.write("\7m\2\2\u02e4\u02e6\7=\2\2\u02e5\u02e7\5@!\2\u02e6\u02e5")
        buf.write("\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e9\5n8\2\u02e9\u02ea\5b\62\2\u02ea\u02eb\7>\2\2\u02eb")
        buf.write("\u02ed\3\2\2\2\u02ec\u02db\3\2\2\2\u02ec\u02dd\3\2\2\2")
        buf.write("\u02ec\u02e1\3\2\2\2\u02ec\u02e4\3\2\2\2\u02ed\u031b\3")
        buf.write("\2\2\2\u02ee\u02ef\f\n\2\2\u02ef\u02f1\7?\2\2\u02f0\u02f2")
        buf.write("\5p9\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4")
        buf.write("\3\2\2\2\u02f3\u02f5\5*\26\2\u02f4\u02f3\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u031a\7@\2\2")
        buf.write("\u02f7\u02f8\f\t\2\2\u02f8\u02f9\7?\2\2\u02f9\u02fb\7")
        buf.write("*\2\2\u02fa\u02fc\5p9\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\5*\26\2\u02fe")
        buf.write("\u02ff\7@\2\2\u02ff\u031a\3\2\2\2\u0300\u0301\f\b\2\2")
        buf.write("\u0301\u0302\7?\2\2\u0302\u0303\5p9\2\u0303\u0304\7*\2")
        buf.write("\2\u0304\u0305\5*\26\2\u0305\u0306\7@\2\2\u0306\u031a")
        buf.write("\3\2\2\2\u0307\u0308\f\7\2\2\u0308\u030a\7?\2\2\u0309")
        buf.write("\u030b\5p9\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b")
        buf.write("\u030c\3\2\2\2\u030c\u030d\7M\2\2\u030d\u031a\7@\2\2\u030e")
        buf.write("\u030f\f\6\2\2\u030f\u0310\7=\2\2\u0310\u0311\5r:\2\u0311")
        buf.write("\u0312\7>\2\2\u0312\u031a\3\2\2\2\u0313\u0314\f\5\2\2")
        buf.write("\u0314\u0316\7=\2\2\u0315\u0317\5x=\2\u0316\u0315\3\2")
        buf.write("\2\2\u0316\u0317\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031a")
        buf.write("\7>\2\2\u0319\u02ee\3\2\2\2\u0319\u02f7\3\2\2\2\u0319")
        buf.write("\u0300\3\2\2\2\u0319\u0307\3\2\2\2\u0319\u030e\3\2\2\2")
        buf.write("\u0319\u0313\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3")
        buf.write("\2\2\2\u031b\u031c\3\2\2\2\u031cc\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031e\u031f\7\r\2\2\u031f\u0321\7=\2\2\u0320")
        buf.write("\u0322\7n\2\2\u0321\u0320\3\2\2\2\u0322\u0323\3\2\2\2")
        buf.write("\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0325\3")
        buf.write("\2\2\2\u0325\u0328\7>\2\2\u0326\u0328\5f\64\2\u0327\u031e")
        buf.write("\3\2\2\2\u0327\u0326\3\2\2\2\u0328e\3\2\2\2\u0329\u032a")
        buf.write("\7\16\2\2\u032a\u032b\7=\2\2\u032b\u032c\7=\2\2\u032c")
        buf.write("\u032d\5h\65\2\u032d\u032e\7>\2\2\u032e\u032f\7>\2\2\u032f")
        buf.write("g\3\2\2\2\u0330\u0335\5j\66\2\u0331\u0332\7Z\2\2\u0332")
        buf.write("\u0334\5j\66\2\u0333\u0331\3\2\2\2\u0334\u0337\3\2\2\2")
        buf.write("\u0335\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u033a\3")
        buf.write("\2\2\2\u0337\u0335\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0330")
        buf.write("\3\2\2\2\u0339\u0338\3\2\2\2\u033ai\3\2\2\2\u033b\u0341")
        buf.write("\n\n\2\2\u033c\u033e\7=\2\2\u033d\u033f\5\f\7\2\u033e")
        buf.write("\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\3\2\2\2")
        buf.write("\u0340\u0342\7>\2\2\u0341\u033c\3\2\2\2\u0341\u0342\3")
        buf.write("\2\2\2\u0342\u0345\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u033b")
        buf.write("\3\2\2\2\u0344\u0343\3\2\2\2\u0345k\3\2\2\2\u0346\u034c")
        buf.write("\n\13\2\2\u0347\u0348\7=\2\2\u0348\u0349\5l\67\2\u0349")
        buf.write("\u034a\7>\2\2\u034a\u034c\3\2\2\2\u034b\u0346\3\2\2\2")
        buf.write("\u034b\u0347\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3")
        buf.write("\2\2\2\u034d\u034e\3\2\2\2\u034em\3\2\2\2\u034f\u034d")
        buf.write("\3\2\2\2\u0350\u0352\7M\2\2\u0351\u0353\5p9\2\u0352\u0351")
        buf.write("\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0363\3\2\2\2\u0354")
        buf.write("\u0356\7M\2\2\u0355\u0357\5p9\2\u0356\u0355\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0363\5n8\2\u0359")
        buf.write("\u035b\7T\2\2\u035a\u035c\5p9\2\u035b\u035a\3\2\2\2\u035b")
        buf.write("\u035c\3\2\2\2\u035c\u0363\3\2\2\2\u035d\u035f\7T\2\2")
        buf.write("\u035e\u0360\5p9\2\u035f\u035e\3\2\2\2\u035f\u0360\3\2")
        buf.write("\2\2\u0360\u0361\3\2\2\2\u0361\u0363\5n8\2\u0362\u0350")
        buf.write("\3\2\2\2\u0362\u0354\3\2\2\2\u0362\u0359\3\2\2\2\u0362")
        buf.write("\u035d\3\2\2\2\u0363o\3\2\2\2\u0364\u0365\b9\1\2\u0365")
        buf.write("\u0366\5Z.\2\u0366\u036b\3\2\2\2\u0367\u0368\f\3\2\2\u0368")
        buf.write("\u036a\5Z.\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b")
        buf.write("\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036cq\3\2\2\2\u036d")
        buf.write("\u036b\3\2\2\2\u036e\u0374\5t;\2\u036f\u0370\5t;\2\u0370")
        buf.write("\u0371\7Z\2\2\u0371\u0372\7j\2\2\u0372\u0374\3\2\2\2\u0373")
        buf.write("\u036e\3\2\2\2\u0373\u036f\3\2\2\2\u0374s\3\2\2\2\u0375")
        buf.write("\u0376\b;\1\2\u0376\u0377\5v<\2\u0377\u037d\3\2\2\2\u0378")
        buf.write("\u0379\f\3\2\2\u0379\u037a\7Z\2\2\u037a\u037c\5v<\2\u037b")
        buf.write("\u0378\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037eu\3\2\2\2\u037f\u037d\3\2\2")
        buf.write("\2\u0380\u0381\5\64\33\2\u0381\u0382\5`\61\2\u0382\u0388")
        buf.write("\3\2\2\2\u0383\u0385\5\66\34\2\u0384\u0386\5|?\2\u0385")
        buf.write("\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2")
        buf.write("\u0387\u0380\3\2\2\2\u0387\u0383\3\2\2\2\u0388w\3\2\2")
        buf.write("\2\u0389\u038a\b=\1\2\u038a\u038b\7k\2\2\u038b\u0391\3")
        buf.write("\2\2\2\u038c\u038d\f\3\2\2\u038d\u038e\7Z\2\2\u038e\u0390")
        buf.write("\7k\2\2\u038f\u038c\3\2\2\2\u0390\u0393\3\2\2\2\u0391")
        buf.write("\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392y\3\2\2\2\u0393")
        buf.write("\u0391\3\2\2\2\u0394\u0396\5J&\2\u0395\u0397\5|?\2\u0396")
        buf.write("\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397{\3\2\2\2\u0398")
        buf.write("\u03a4\5n8\2\u0399\u039b\5n8\2\u039a\u0399\3\2\2\2\u039a")
        buf.write("\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a0\5~@\2\u039d")
        buf.write("\u039f\5d\63\2\u039e\u039d\3\2\2\2\u039f\u03a2\3\2\2\2")
        buf.write("\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a4\3")
        buf.write("\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u0398\3\2\2\2\u03a3\u039a")
        buf.write("\3\2\2\2\u03a4}\3\2\2\2\u03a5\u03a6\b@\1\2\u03a6\u03a7")
        buf.write("\7=\2\2\u03a7\u03a8\5|?\2\u03a8\u03ac\7>\2\2\u03a9\u03ab")
        buf.write("\5d\63\2\u03aa\u03a9\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac")
        buf.write("\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03d4\3\2\2\2")
        buf.write("\u03ae\u03ac\3\2\2\2\u03af\u03b1\7?\2\2\u03b0\u03b2\5")
        buf.write("p9\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4")
        buf.write("\3\2\2\2\u03b3\u03b5\5*\26\2\u03b4\u03b3\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03d4\7@\2\2")
        buf.write("\u03b7\u03b8\7?\2\2\u03b8\u03ba\7*\2\2\u03b9\u03bb\5p")
        buf.write("9\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc")
        buf.write("\3\2\2\2\u03bc\u03bd\5*\26\2\u03bd\u03be\7@\2\2\u03be")
        buf.write("\u03d4\3\2\2\2\u03bf\u03c0\7?\2\2\u03c0\u03c1\5p9\2\u03c1")
        buf.write("\u03c2\7*\2\2\u03c2\u03c3\5*\26\2\u03c3\u03c4\7@\2\2\u03c4")
        buf.write("\u03d4\3\2\2\2\u03c5\u03c6\7?\2\2\u03c6\u03c7\7M\2\2\u03c7")
        buf.write("\u03d4\7@\2\2\u03c8\u03ca\7=\2\2\u03c9\u03cb\5r:\2\u03ca")
        buf.write("\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03d0\7>\2\2\u03cd\u03cf\5d\63\2\u03ce\u03cd\3")
        buf.write("\2\2\2\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03d1")
        buf.write("\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d3")
        buf.write("\u03a5\3\2\2\2\u03d3\u03af\3\2\2\2\u03d3\u03b7\3\2\2\2")
        buf.write("\u03d3\u03bf\3\2\2\2\u03d3\u03c5\3\2\2\2\u03d3\u03c8\3")
        buf.write("\2\2\2\u03d4\u0400\3\2\2\2\u03d5\u03d6\f\7\2\2\u03d6\u03d8")
        buf.write("\7?\2\2\u03d7\u03d9\5p9\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9")
        buf.write("\3\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03dc\5*\26\2\u03db")
        buf.write("\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03ff\7@\2\2\u03de\u03df\f\6\2\2\u03df\u03e0\7")
        buf.write("?\2\2\u03e0\u03e2\7*\2\2\u03e1\u03e3\5p9\2\u03e2\u03e1")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e5\5*\26\2\u03e5\u03e6\7@\2\2\u03e6\u03ff\3\2\2\2")
        buf.write("\u03e7\u03e8\f\5\2\2\u03e8\u03e9\7?\2\2\u03e9\u03ea\5")
        buf.write("p9\2\u03ea\u03eb\7*\2\2\u03eb\u03ec\5*\26\2\u03ec\u03ed")
        buf.write("\7@\2\2\u03ed\u03ff\3\2\2\2\u03ee\u03ef\f\4\2\2\u03ef")
        buf.write("\u03f0\7?\2\2\u03f0\u03f1\7M\2\2\u03f1\u03ff\7@\2\2\u03f2")
        buf.write("\u03f3\f\3\2\2\u03f3\u03f5\7=\2\2\u03f4\u03f6\5r:\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u03fb\7>\2\2\u03f8\u03fa\5d\63\2\u03f9\u03f8\3")
        buf.write("\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc")
        buf.write("\3\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe")
        buf.write("\u03d5\3\2\2\2\u03fe\u03de\3\2\2\2\u03fe\u03e7\3\2\2\2")
        buf.write("\u03fe\u03ee\3\2\2\2\u03fe\u03f2\3\2\2\2\u03ff\u0402\3")
        buf.write("\2\2\2\u0400\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\177")
        buf.write("\3\2\2\2\u0402\u0400\3\2\2\2\u0403\u0404\7k\2\2\u0404")
        buf.write("\u0081\3\2\2\2\u0405\u0410\5*\26\2\u0406\u0407\7A\2\2")
        buf.write("\u0407\u0408\5\u0084C\2\u0408\u0409\7B\2\2\u0409\u0410")
        buf.write("\3\2\2\2\u040a\u040b\7A\2\2\u040b\u040c\5\u0084C\2\u040c")
        buf.write("\u040d\7Z\2\2\u040d\u040e\7B\2\2\u040e\u0410\3\2\2\2\u040f")
        buf.write("\u0405\3\2\2\2\u040f\u0406\3\2\2\2\u040f\u040a\3\2\2\2")
        buf.write("\u0410\u0083\3\2\2\2\u0411\u0413\bC\1\2\u0412\u0414\5")
        buf.write("\u0086D\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0416\5\u0082B\2\u0416\u041f\3\2")
        buf.write("\2\2\u0417\u0418\f\3\2\2\u0418\u041a\7Z\2\2\u0419\u041b")
        buf.write("\5\u0086D\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u041e\5\u0082B\2\u041d\u0417\3\2")
        buf.write("\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420")
        buf.write("\3\2\2\2\u0420\u0085\3\2\2\2\u0421\u041f\3\2\2\2\u0422")
        buf.write("\u0423\5\u0088E\2\u0423\u0424\7[\2\2\u0424\u0087\3\2\2")
        buf.write("\2\u0425\u0426\bE\1\2\u0426\u0427\5\u008aF\2\u0427\u042c")
        buf.write("\3\2\2\2\u0428\u0429\f\3\2\2\u0429\u042b\5\u008aF\2\u042a")
        buf.write("\u0428\3\2\2\2\u042b\u042e\3\2\2\2\u042c\u042a\3\2\2\2")
        buf.write("\u042c\u042d\3\2\2\2\u042d\u0089\3\2\2\2\u042e\u042c\3")
        buf.write("\2\2\2\u042f\u0430\7?\2\2\u0430\u0431\5\60\31\2\u0431")
        buf.write("\u0432\7@\2\2\u0432\u0436\3\2\2\2\u0433\u0434\7i\2\2\u0434")
        buf.write("\u0436\7k\2\2\u0435\u042f\3\2\2\2\u0435\u0433\3\2\2\2")
        buf.write("\u0436\u008b\3\2\2\2\u0437\u0438\7;\2\2\u0438\u0439\7")
        buf.write("=\2\2\u0439\u043a\5\60\31\2\u043a\u043c\7Z\2\2\u043b\u043d")
        buf.write("\7n\2\2\u043c\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e")
        buf.write("\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0440\3\2\2\2")
        buf.write("\u0440\u0441\7>\2\2\u0441\u0442\7Y\2\2\u0442\u008d\3\2")
        buf.write("\2\2\u0443\u0469\5\u0090I\2\u0444\u0469\5\u0092J\2\u0445")
        buf.write("\u0469\5\u0098M\2\u0446\u0469\5\u009aN\2\u0447\u0469\5")
        buf.write("\u009cO\2\u0448\u0469\5\u00a4S\2\u0449\u044a\t\f\2\2\u044a")
        buf.write("\u044b\t\r\2\2\u044b\u0454\7=\2\2\u044c\u0451\5&\24\2")
        buf.write("\u044d\u044e\7Z\2\2\u044e\u0450\5&\24\2\u044f\u044d\3")
        buf.write("\2\2\2\u0450\u0453\3\2\2\2\u0451\u044f\3\2\2\2\u0451\u0452")
        buf.write("\3\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451\3\2\2\2\u0454")
        buf.write("\u044c\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0463\3\2\2\2")
        buf.write("\u0456\u045f\7X\2\2\u0457\u045c\5&\24\2\u0458\u0459\7")
        buf.write("Z\2\2\u0459\u045b\5&\24\2\u045a\u0458\3\2\2\2\u045b\u045e")
        buf.write("\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d")
        buf.write("\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0457\3\2\2\2")
        buf.write("\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u0456\3")
        buf.write("\2\2\2\u0462\u0465\3\2\2\2\u0463\u0461\3\2\2\2\u0463\u0464")
        buf.write("\3\2\2\2\u0464\u0466\3\2\2\2\u0465\u0463\3\2\2\2\u0466")
        buf.write("\u0467\7>\2\2\u0467\u0469\7Y\2\2\u0468\u0443\3\2\2\2\u0468")
        buf.write("\u0444\3\2\2\2\u0468\u0445\3\2\2\2\u0468\u0446\3\2\2\2")
        buf.write("\u0468\u0447\3\2\2\2\u0468\u0448\3\2\2\2\u0468\u0449\3")
        buf.write("\2\2\2\u0469\u008f\3\2\2\2\u046a\u046b\7k\2\2\u046b\u046c")
        buf.write("\7X\2\2\u046c\u0476\5\u008eH\2\u046d\u046e\7\23\2\2\u046e")
        buf.write("\u046f\5\60\31\2\u046f\u0470\7X\2\2\u0470\u0471\5\u008e")
        buf.write("H\2\u0471\u0476\3\2\2\2\u0472\u0473\7\27\2\2\u0473\u0474")
        buf.write("\7X\2\2\u0474\u0476\5\u008eH\2\u0475\u046a\3\2\2\2\u0475")
        buf.write("\u046d\3\2\2\2\u0475\u0472\3\2\2\2\u0476\u0091\3\2\2\2")
        buf.write("\u0477\u0479\7A\2\2\u0478\u047a\5\u0094K\2\u0479\u0478")
        buf.write("\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u047c\7B\2\2\u047c\u0093\3\2\2\2\u047d\u047e\bK\1\2\u047e")
        buf.write("\u047f\5\u0096L\2\u047f\u0484\3\2\2\2\u0480\u0481\f\3")
        buf.write("\2\2\u0481\u0483\5\u0096L\2\u0482\u0480\3\2\2\2\u0483")
        buf.write("\u0486\3\2\2\2\u0484\u0482\3\2\2\2\u0484\u0485\3\2\2\2")
        buf.write("\u0485\u0095\3\2\2\2\u0486\u0484\3\2\2\2\u0487\u048a\5")
        buf.write("\u008eH\2\u0488\u048a\5\62\32\2\u0489\u0487\3\2\2\2\u0489")
        buf.write("\u0488\3\2\2\2\u048a\u0097\3\2\2\2\u048b\u048d\5.\30\2")
        buf.write("\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3")
        buf.write("\2\2\2\u048e\u048f\7Y\2\2\u048f\u0099\3\2\2\2\u0490\u0491")
        buf.write("\7 \2\2\u0491\u0492\7=\2\2\u0492\u0493\5.\30\2\u0493\u0494")
        buf.write("\7>\2\2\u0494\u0497\5\u008eH\2\u0495\u0496\7\32\2\2\u0496")
        buf.write("\u0498\5\u008eH\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2")
        buf.write("\2\2\u0498\u04a0\3\2\2\2\u0499\u049a\7,\2\2\u049a\u049b")
        buf.write("\7=\2\2\u049b\u049c\5.\30\2\u049c\u049d\7>\2\2\u049d\u049e")
        buf.write("\5\u008eH\2\u049e\u04a0\3\2\2\2\u049f\u0490\3\2\2\2\u049f")
        buf.write("\u0499\3\2\2\2\u04a0\u009b\3\2\2\2\u04a1\u04a2\7\62\2")
        buf.write("\2\u04a2\u04a3\7=\2\2\u04a3\u04a4\5.\30\2\u04a4\u04a5")
        buf.write("\7>\2\2\u04a5\u04a6\5\u008eH\2\u04a6\u04b6\3\2\2\2\u04a7")
        buf.write("\u04a8\7\30\2\2\u04a8\u04a9\5\u008eH\2\u04a9\u04aa\7\62")
        buf.write("\2\2\u04aa\u04ab\7=\2\2\u04ab\u04ac\5.\30\2\u04ac\u04ad")
        buf.write("\7>\2\2\u04ad\u04ae\7Y\2\2\u04ae\u04b6\3\2\2\2\u04af\u04b0")
        buf.write("\7\36\2\2\u04b0\u04b1\7=\2\2\u04b1\u04b2\5\u009eP\2\u04b2")
        buf.write("\u04b3\7>\2\2\u04b3\u04b4\5\u008eH\2\u04b4\u04b6\3\2\2")
        buf.write("\2\u04b5\u04a1\3\2\2\2\u04b5\u04a7\3\2\2\2\u04b5\u04af")
        buf.write("\3\2\2\2\u04b6\u009d\3\2\2\2\u04b7\u04b8\5\u00a0Q\2\u04b8")
        buf.write("\u04ba\7Y\2\2\u04b9\u04bb\5\u00a2R\2\u04ba\u04b9\3\2\2")
        buf.write("\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be")
        buf.write("\7Y\2\2\u04bd\u04bf\5\u00a2R\2\u04be\u04bd\3\2\2\2\u04be")
        buf.write("\u04bf\3\2\2\2\u04bf\u04cc\3\2\2\2\u04c0\u04c2\5.\30\2")
        buf.write("\u04c1\u04c0\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\3")
        buf.write("\2\2\2\u04c3\u04c5\7Y\2\2\u04c4\u04c6\5\u00a2R\2\u04c5")
        buf.write("\u04c4\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2")
        buf.write("\u04c7\u04c9\7Y\2\2\u04c8\u04ca\5\u00a2R\2\u04c9\u04c8")
        buf.write("\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\3\2\2\2\u04cb")
        buf.write("\u04b7\3\2\2\2\u04cb\u04c1\3\2\2\2\u04cc\u009f\3\2\2\2")
        buf.write("\u04cd\u04ce\5\64\33\2\u04ce\u04cf\5:\36\2\u04cf\u04d2")
        buf.write("\3\2\2\2\u04d0\u04d2\5\64\33\2\u04d1\u04cd\3\2\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d2\u00a1\3\2\2\2\u04d3\u04d4\bR\1\2")
        buf.write("\u04d4\u04d5\5*\26\2\u04d5\u04db\3\2\2\2\u04d6\u04d7\f")
        buf.write("\3\2\2\u04d7\u04d8\7Z\2\2\u04d8\u04da\5*\26\2\u04d9\u04d6")
        buf.write("\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u00a3\3\2\2\2\u04dd\u04db\3\2\2\2")
        buf.write("\u04de\u04df\7\37\2\2\u04df\u04e0\7k\2\2\u04e0\u04ef\7")
        buf.write("Y\2\2\u04e1\u04e2\7\26\2\2\u04e2\u04ef\7Y\2\2\u04e3\u04e4")
        buf.write("\7\22\2\2\u04e4\u04ef\7Y\2\2\u04e5\u04e7\7&\2\2\u04e6")
        buf.write("\u04e8\5.\30\2\u04e7\u04e6\3\2\2\2\u04e7\u04e8\3\2\2\2")
        buf.write("\u04e8\u04e9\3\2\2\2\u04e9\u04ef\7Y\2\2\u04ea\u04eb\7")
        buf.write("\37\2\2\u04eb\u04ec\5\16\b\2\u04ec\u04ed\7Y\2\2\u04ed")
        buf.write("\u04ef\3\2\2\2\u04ee\u04de\3\2\2\2\u04ee\u04e1\3\2\2\2")
        buf.write("\u04ee\u04e3\3\2\2\2\u04ee\u04e5\3\2\2\2\u04ee\u04ea\3")
        buf.write("\2\2\2\u04ef\u00a5\3\2\2\2\u04f0\u04f2\5\u00a8U\2\u04f1")
        buf.write("\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\3\2\2\2")
        buf.write("\u04f3\u04f4\7\2\2\3\u04f4\u00a7\3\2\2\2\u04f5\u04f6\b")
        buf.write("U\1\2\u04f6\u04f7\5\u00aaV\2\u04f7\u04fc\3\2\2\2\u04f8")
        buf.write("\u04f9\f\3\2\2\u04f9\u04fb\5\u00aaV\2\u04fa\u04f8\3\2")
        buf.write("\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fd")
        buf.write("\3\2\2\2\u04fd\u00a9\3\2\2\2\u04fe\u04fc\3\2\2\2\u04ff")
        buf.write("\u0504\5\u00acW\2\u0500\u0504\5\62\32\2\u0501\u0504\7")
        buf.write("Y\2\2\u0502\u0504\5\u00b0Y\2\u0503\u04ff\3\2\2\2\u0503")
        buf.write("\u0500\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0502\3\2\2\2")
        buf.write("\u0504\u00ab\3\2\2\2\u0505\u0507\5\64\33\2\u0506\u0505")
        buf.write("\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508\3\2\2\2\u0508")
        buf.write("\u050a\5`\61\2\u0509\u050b\5\u00aeX\2\u050a\u0509\3\2")
        buf.write("\2\2\u050a\u050b\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d")
        buf.write("\5\u0092J\2\u050d\u00ad\3\2\2\2\u050e\u050f\bX\1\2\u050f")
        buf.write("\u0510\5\62\32\2\u0510\u0515\3\2\2\2\u0511\u0512\f\3\2")
        buf.write("\2\u0512\u0514\5\62\32\2\u0513\u0511\3\2\2\2\u0514\u0517")
        buf.write("\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516")
        buf.write("\u00af\3\2\2\2\u0517\u0515\3\2\2\2\u0518\u0519\t\16\2")
        buf.write("\2\u0519\u00b1\3\2\2\2\u0090\u00b7\u00bf\u00d3\u00e4\u00ee")
        buf.write("\u0112\u011c\u0129\u012b\u0136\u014f\u0160\u016e\u0170")
        buf.write("\u017c\u017e\u018a\u018c\u019e\u01a0\u01ac\u01ae\u01b9")
        buf.write("\u01c4\u01cf\u01da\u01e5\u01ee\u01f6\u0202\u020f\u0214")
        buf.write("\u0219\u0220\u022a\u0232\u0245\u024b\u0250\u0259\u0264")
        buf.write("\u0269\u026e\u0272\u0276\u0278\u0282\u0287\u028b\u028f")
        buf.write("\u0297\u02a0\u02aa\u02b2\u02c3\u02cf\u02d2\u02d8\u02e6")
        buf.write("\u02ec\u02f1\u02f4\u02fb\u030a\u0316\u0319\u031b\u0323")
        buf.write("\u0327\u0335\u0339\u033e\u0341\u0344\u034b\u034d\u0352")
        buf.write("\u0356\u035b\u035f\u0362\u036b\u0373\u037d\u0385\u0387")
        buf.write("\u0391\u0396\u039a\u03a0\u03a3\u03ac\u03b1\u03b4\u03ba")
        buf.write("\u03ca\u03d0\u03d3\u03d8\u03db\u03e2\u03f5\u03fb\u03fe")
        buf.write("\u0400\u040f\u0413\u041a\u041f\u042c\u0435\u043e\u0451")
        buf.write("\u0454\u045c\u045f\u0463\u0468\u0475\u0479\u0484\u0489")
        buf.write("\u048c\u0497\u049f\u04b5\u04ba\u04be\u04c1\u04c5\u04c9")
        buf.write("\u04cb\u04d1\u04db\u04e7\u04ee\u04f1\u04fc\u0503\u0506")
        buf.write("\u050a\u0515")
        return buf.getvalue()


class CParser ( Parser ):

    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'enum'", "'extern'", "'float'", "'for'", "'goto'", 
                     "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "IncludeDirective", "IfStartDirective", "IfEndDirective", 
                      "ExtendedIfDirective", "UndefDirective", "AsmBlock", 
                      "LineAfterPreprocessing", "LineDirective", "PragmaDirective", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_argumentExpressionList = 5
    RULE_unaryExpression = 6
    RULE_unaryOperator = 7
    RULE_castExpression = 8
    RULE_multiplicativeExpression = 9
    RULE_additiveExpression = 10
    RULE_shiftExpression = 11
    RULE_relationalExpression = 12
    RULE_equalityExpression = 13
    RULE_andExpression = 14
    RULE_exclusiveOrExpression = 15
    RULE_inclusiveOrExpression = 16
    RULE_logicalAndExpression = 17
    RULE_logicalOrExpression = 18
    RULE_conditionalExpression = 19
    RULE_assignmentExpression = 20
    RULE_assignmentOperator = 21
    RULE_expression = 22
    RULE_constantExpression = 23
    RULE_declaration = 24
    RULE_declarationSpecifiers = 25
    RULE_declarationSpecifiers2 = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_storageClassSpecifier = 30
    RULE_typeSpecifier = 31
    RULE_structOrUnionSpecifier = 32
    RULE_structOrUnion = 33
    RULE_structDeclarationList = 34
    RULE_structDeclaration = 35
    RULE_specifierQualifierList = 36
    RULE_structDeclaratorList = 37
    RULE_structDeclarator = 38
    RULE_enumSpecifier = 39
    RULE_enumeratorList = 40
    RULE_enumerator = 41
    RULE_enumerationConstant = 42
    RULE_atomicTypeSpecifier = 43
    RULE_typeQualifier = 44
    RULE_functionSpecifier = 45
    RULE_alignmentSpecifier = 46
    RULE_declarator = 47
    RULE_directDeclarator = 48
    RULE_gccDeclaratorExtension = 49
    RULE_gccAttributeSpecifier = 50
    RULE_gccAttributeList = 51
    RULE_gccAttribute = 52
    RULE_nestedParenthesesBlock = 53
    RULE_pointer = 54
    RULE_typeQualifierList = 55
    RULE_parameterTypeList = 56
    RULE_parameterList = 57
    RULE_parameterDeclaration = 58
    RULE_identifierList = 59
    RULE_typeName = 60
    RULE_abstractDeclarator = 61
    RULE_directAbstractDeclarator = 62
    RULE_typedefName = 63
    RULE_initializer = 64
    RULE_initializerList = 65
    RULE_designation = 66
    RULE_designatorList = 67
    RULE_designator = 68
    RULE_staticAssertDeclaration = 69
    RULE_statement = 70
    RULE_labeledStatement = 71
    RULE_compoundStatement = 72
    RULE_blockItemList = 73
    RULE_blockItem = 74
    RULE_expressionStatement = 75
    RULE_selectionStatement = 76
    RULE_iterationStatement = 77
    RULE_forCondition = 78
    RULE_forDeclaration = 79
    RULE_forExpression = 80
    RULE_jumpStatement = 81
    RULE_compilationUnit = 82
    RULE_translationUnit = 83
    RULE_externalDeclaration = 84
    RULE_functionDefinition = 85
    RULE_declarationList = 86
    RULE_directive = 87

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList", 
                   "gccAttribute", "nestedParenthesesBlock", "pointer", 
                   "typeQualifierList", "parameterTypeList", "parameterList", 
                   "parameterDeclaration", "identifierList", "typeName", 
                   "abstractDeclarator", "directAbstractDeclarator", "typedefName", 
                   "initializer", "initializerList", "designation", "designatorList", 
                   "designator", "staticAssertDeclaration", "statement", 
                   "labeledStatement", "compoundStatement", "blockItemList", 
                   "blockItem", "expressionStatement", "selectionStatement", 
                   "iterationStatement", "forCondition", "forDeclaration", 
                   "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList", "directive" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    Auto=15
    Break=16
    Case=17
    Char=18
    Const=19
    Continue=20
    Default=21
    Do=22
    Double=23
    Else=24
    Enum=25
    Extern=26
    Float=27
    For=28
    Goto=29
    If=30
    Inline=31
    Int=32
    Long=33
    Register=34
    Restrict=35
    Return=36
    Short=37
    Signed=38
    Sizeof=39
    Static=40
    Struct=41
    Switch=42
    Typedef=43
    Union=44
    Unsigned=45
    Void=46
    Volatile=47
    While=48
    Alignas=49
    Alignof=50
    Atomic=51
    Bool=52
    Complex=53
    Generic=54
    Imaginary=55
    Noreturn=56
    StaticAssert=57
    ThreadLocal=58
    LeftParen=59
    RightParen=60
    LeftBracket=61
    RightBracket=62
    LeftBrace=63
    RightBrace=64
    Less=65
    LessEqual=66
    Greater=67
    GreaterEqual=68
    LeftShift=69
    RightShift=70
    Plus=71
    PlusPlus=72
    Minus=73
    MinusMinus=74
    Star=75
    Div=76
    Mod=77
    And=78
    Or=79
    AndAnd=80
    OrOr=81
    Caret=82
    Not=83
    Tilde=84
    Question=85
    Colon=86
    Semi=87
    Comma=88
    Assign=89
    StarAssign=90
    DivAssign=91
    ModAssign=92
    PlusAssign=93
    MinusAssign=94
    LeftShiftAssign=95
    RightShiftAssign=96
    AndAssign=97
    XorAssign=98
    OrAssign=99
    Equal=100
    NotEqual=101
    Arrow=102
    Dot=103
    Ellipsis=104
    Identifier=105
    Constant=106
    DigitSequence=107
    StringLiteral=108
    ComplexDefine=109
    IncludeDirective=110
    IfStartDirective=111
    IfEndDirective=112
    ExtendedIfDirective=113
    UndefDirective=114
    AsmBlock=115
    LineAfterPreprocessing=116
    LineDirective=117
    PragmaDirective=118
    Whitespace=119
    Newline=120
    BlockComment=121
    LineComment=122

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 179 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 178
                        self.match(CParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 181 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 183
                self.match(CParser.LeftParen)
                self.state = 184
                self.expression(0)
                self.state = 185
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 188
                    self.match(CParser.T__0)


                self.state = 191
                self.match(CParser.LeftParen)
                self.state = 192
                self.compoundStatement()
                self.state = 193
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 195
                self.match(CParser.T__1)
                self.state = 196
                self.match(CParser.LeftParen)
                self.state = 197
                self.unaryExpression()
                self.state = 198
                self.match(CParser.Comma)
                self.state = 199
                self.typeName()
                self.state = 200
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 202
                self.match(CParser.T__2)
                self.state = 203
                self.match(CParser.LeftParen)
                self.state = 204
                self.typeName()
                self.state = 205
                self.match(CParser.Comma)
                self.state = 206
                self.unaryExpression()
                self.state = 207
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(CParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSelection" ):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)




    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(CParser.Generic)
            self.state = 212
            self.match(CParser.LeftParen)
            self.state = 213
            self.assignmentExpression()
            self.state = 214
            self.match(CParser.Comma)
            self.state = 215
            self.genericAssocList(0)
            self.state = 216
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self):
            return self.getTypedRuleContext(CParser.GenericAssociationContext,0)


        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssocList" ):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)



    def genericAssocList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.GenericAssocListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_genericAssocList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.genericAssociation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.GenericAssocListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_genericAssocList)
                    self.state = 221
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 222
                    self.match(CParser.Comma)
                    self.state = 223
                    self.genericAssociation() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GenericAssociationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssociation" ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.state = 236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.typeName()
                self.state = 230
                self.match(CParser.Colon)
                self.state = 231
                self.assignmentExpression()
                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.match(CParser.Default)
                self.state = 234
                self.match(CParser.Colon)
                self.state = 235
                self.assignmentExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Arrow(self):
            return self.getToken(CParser.Arrow, 0)

        def PlusPlus(self):
            return self.getToken(CParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CParser.MinusMinus, 0)

        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 239
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 240
                self.match(CParser.LeftParen)
                self.state = 241
                self.typeName()
                self.state = 242
                self.match(CParser.RightParen)
                self.state = 243
                self.match(CParser.LeftBrace)
                self.state = 244
                self.initializerList(0)
                self.state = 245
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.state = 247
                self.match(CParser.LeftParen)
                self.state = 248
                self.typeName()
                self.state = 249
                self.match(CParser.RightParen)
                self.state = 250
                self.match(CParser.LeftBrace)
                self.state = 251
                self.initializerList(0)
                self.state = 252
                self.match(CParser.Comma)
                self.state = 253
                self.match(CParser.RightBrace)
                pass

            elif la_ == 4:
                self.state = 255
                self.match(CParser.T__0)
                self.state = 256
                self.match(CParser.LeftParen)
                self.state = 257
                self.typeName()
                self.state = 258
                self.match(CParser.RightParen)
                self.state = 259
                self.match(CParser.LeftBrace)
                self.state = 260
                self.initializerList(0)
                self.state = 261
                self.match(CParser.RightBrace)
                pass

            elif la_ == 5:
                self.state = 263
                self.match(CParser.T__0)
                self.state = 264
                self.match(CParser.LeftParen)
                self.state = 265
                self.typeName()
                self.state = 266
                self.match(CParser.RightParen)
                self.state = 267
                self.match(CParser.LeftBrace)
                self.state = 268
                self.initializerList(0)
                self.state = 269
                self.match(CParser.Comma)
                self.state = 270
                self.match(CParser.RightBrace)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 295
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 274
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 275
                        self.match(CParser.LeftBracket)
                        self.state = 276
                        self.expression(0)
                        self.state = 277
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 279
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 280
                        self.match(CParser.LeftParen)
                        self.state = 282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 281
                            self.argumentExpressionList(0)


                        self.state = 284
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 285
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 286
                        self.match(CParser.Dot)
                        self.state = 287
                        self.match(CParser.Identifier)
                        pass

                    elif la_ == 4:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 288
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 289
                        self.match(CParser.Arrow)
                        self.state = 290
                        self.match(CParser.Identifier)
                        pass

                    elif la_ == 5:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 291
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 292
                        self.match(CParser.PlusPlus)
                        pass

                    elif la_ == 6:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 293
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 294
                        self.match(CParser.MinusMinus)
                        pass

             
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)



    def argumentExpressionList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_argumentExpressionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ArgumentExpressionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argumentExpressionList)
                    self.state = 303
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 304
                    self.match(CParser.Comma)
                    self.state = 305
                    self.assignmentExpression() 
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def PlusPlus(self):
            return self.getToken(CParser.PlusPlus, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def MinusMinus(self):
            return self.getToken(CParser.MinusMinus, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def Sizeof(self):
            return self.getToken(CParser.Sizeof, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Alignof(self):
            return self.getToken(CParser.Alignof, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryExpression)
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.match(CParser.PlusPlus)
                self.state = 313
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.match(CParser.MinusMinus)
                self.state = 315
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self.unaryOperator()
                self.state = 317
                self.castExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 319
                self.match(CParser.Sizeof)
                self.state = 320
                self.unaryExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 321
                self.match(CParser.Sizeof)
                self.state = 322
                self.match(CParser.LeftParen)
                self.state = 323
                self.typeName()
                self.state = 324
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 326
                self.match(CParser.Alignof)
                self.state = 327
                self.match(CParser.LeftParen)
                self.state = 328
                self.typeName()
                self.state = 329
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 331
                self.match(CParser.AndAnd)
                self.state = 332
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CParser.And, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_castExpression)
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 337
                self.match(CParser.LeftParen)
                self.state = 338
                self.typeName()
                self.state = 339
                self.match(CParser.RightParen)
                self.state = 340
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.match(CParser.T__0)
                self.state = 343
                self.match(CParser.LeftParen)
                self.state = 344
                self.typeName()
                self.state = 345
                self.match(CParser.RightParen)
                self.state = 346
                self.castExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 349
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,0)


        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Div(self):
            return self.getToken(CParser.Div, 0)

        def Mod(self):
            return self.getToken(CParser.Mod, 0)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.castExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 364
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 355
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 356
                        self.match(CParser.Star)
                        self.state = 357
                        self.castExpression()
                        pass

                    elif la_ == 2:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 358
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 359
                        self.match(CParser.Div)
                        self.state = 360
                        self.castExpression()
                        pass

                    elif la_ == 3:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 361
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 362
                        self.match(CParser.Mod)
                        self.state = 363
                        self.castExpression()
                        pass

             
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext,0)


        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 380
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 378
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 372
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 373
                        self.match(CParser.Plus)
                        self.state = 374
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 375
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 376
                        self.match(CParser.Minus)
                        self.state = 377
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext,0)


        def LeftShift(self):
            return self.getToken(CParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(CParser.RightShift, 0)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 392
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 386
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 387
                        self.match(CParser.LeftShift)
                        self.state = 388
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 389
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 390
                        self.match(CParser.RightShift)
                        self.state = 391
                        self.additiveExpression(0)
                        pass

             
                self.state = 396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext,0)


        def Less(self):
            return self.getToken(CParser.Less, 0)

        def Greater(self):
            return self.getToken(CParser.Greater, 0)

        def LessEqual(self):
            return self.getToken(CParser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CParser.GreaterEqual, 0)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 412
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 400
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 401
                        self.match(CParser.Less)
                        self.state = 402
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 403
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 404
                        self.match(CParser.Greater)
                        self.state = 405
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 406
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 407
                        self.match(CParser.LessEqual)
                        self.state = 408
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 409
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 410
                        self.match(CParser.GreaterEqual)
                        self.state = 411
                        self.shiftExpression(0)
                        pass

             
                self.state = 416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext,0)


        def Equal(self):
            return self.getToken(CParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CParser.NotEqual, 0)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 426
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 420
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 421
                        self.match(CParser.Equal)
                        self.state = 422
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 423
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 424
                        self.match(CParser.NotEqual)
                        self.state = 425
                        self.relationalExpression(0)
                        pass

             
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext,0)


        def And(self):
            return self.getToken(CParser.And, 0)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def andExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 439
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 434
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 435
                    self.match(CParser.And)
                    self.state = 436
                    self.equalityExpression(0) 
                self.state = 441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,0)


        def Caret(self):
            return self.getToken(CParser.Caret, 0)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 445
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 446
                    self.match(CParser.Caret)
                    self.state = 447
                    self.andExpression(0) 
                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,0)


        def Or(self):
            return self.getToken(CParser.Or, 0)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 456
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 457
                    self.match(CParser.Or)
                    self.state = 458
                    self.exclusiveOrExpression(0) 
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,0)


        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 467
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 468
                    self.match(CParser.AndAnd)
                    self.state = 469
                    self.inclusiveOrExpression(0) 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def OrOr(self):
            return self.getToken(CParser.OrOr, 0)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 478
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 479
                    self.match(CParser.OrOr)
                    self.state = 480
                    self.logicalAndExpression(0) 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.logicalOrExpression(0)
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 487
                self.match(CParser.Question)
                self.state = 488
                self.expression(0)
                self.state = 489
                self.match(CParser.Colon)
                self.state = 490
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentExpression)
        try:
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.unaryExpression()
                self.state = 496
                self.assignmentOperator()
                self.state = 497
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CParser.OrAssign, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (CParser.Assign - 89)) | (1 << (CParser.StarAssign - 89)) | (1 << (CParser.DivAssign - 89)) | (1 << (CParser.ModAssign - 89)) | (1 << (CParser.PlusAssign - 89)) | (1 << (CParser.MinusAssign - 89)) | (1 << (CParser.LeftShiftAssign - 89)) | (1 << (CParser.RightShiftAssign - 89)) | (1 << (CParser.AndAssign - 89)) | (1 << (CParser.XorAssign - 89)) | (1 << (CParser.OrAssign - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 507
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 508
                    self.match(CParser.Comma)
                    self.state = 509
                    self.assignmentExpression() 
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declaration)
        try:
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.declarationSpecifiers()
                self.state = 518
                self.initDeclaratorList(0)
                self.state = 519
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.declarationSpecifiers()
                self.state = 522
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 524
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers" ):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 527
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 530 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers2" ):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 532
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 535 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifier" ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 539
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 540
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 541
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)



    def initDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InitDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_initDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.initDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InitDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initDeclaratorList)
                    self.state = 547
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 548
                    self.match(CParser.Comma)
                    self.state = 549
                    self.initDeclarator() 
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.declarator()
                self.state = 557
                self.match(CParser.Assign)
                self.state = 558
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def Extern(self):
            return self.getToken(CParser.Extern, 0)

        def Static(self):
            return self.getToken(CParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(CParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(CParser.Auto, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageClassSpecifier" ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Auto) | (1 << CParser.Extern) | (1 << CParser.Register) | (1 << CParser.Static) | (1 << CParser.Typedef) | (1 << CParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(CParser.Void, 0)

        def Char(self):
            return self.getToken(CParser.Char, 0)

        def Short(self):
            return self.getToken(CParser.Short, 0)

        def Int(self):
            return self.getToken(CParser.Int, 0)

        def Long(self):
            return self.getToken(CParser.Long, 0)

        def Float(self):
            return self.getToken(CParser.Float, 0)

        def Double(self):
            return self.getToken(CParser.Double, 0)

        def Signed(self):
            return self.getToken(CParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(CParser.Bool, 0)

        def Complex(self):
            return self.getToken(CParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__3, CParser.T__4, CParser.T__5, CParser.Char, CParser.Double, CParser.Float, CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void, CParser.Bool, CParser.Complex]:
                self.state = 565
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__0]:
                self.state = 566
                self.match(CParser.T__0)
                self.state = 567
                self.match(CParser.LeftParen)
                self.state = 568
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 569
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.Atomic]:
                self.state = 570
                self.atomicTypeSpecifier()
                pass
            elif token in [CParser.Struct, CParser.Union]:
                self.state = 571
                self.structOrUnionSpecifier()
                pass
            elif token in [CParser.Enum]:
                self.state = 572
                self.enumSpecifier()
                pass
            elif token in [CParser.Identifier]:
                self.state = 573
                self.typedefName()
                pass
            elif token in [CParser.T__6]:
                self.state = 574
                self.match(CParser.T__6)
                self.state = 575
                self.match(CParser.LeftParen)
                self.state = 576
                self.constantExpression()
                self.state = 577
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 581
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 582
                    self.pointer() 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.structOrUnion()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 589
                    self.match(CParser.Identifier)


                self.state = 592
                self.match(CParser.LeftBrace)
                self.state = 593
                self.structDeclarationList(0)
                self.state = 594
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.structOrUnion()
                self.state = 597
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(CParser.Struct, 0)

        def Union(self):
            return self.getToken(CParser.Union, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnion" ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            _la = self._input.LA(1)
            if not(_la==CParser.Struct or _la==CParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self):
            return self.getTypedRuleContext(CParser.StructDeclarationContext,0)


        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationList" ):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)



    def structDeclarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.StructDeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_structDeclarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.structDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.StructDeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclarationList)
                    self.state = 606
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 607
                    self.structDeclaration() 
                self.state = 612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.specifierQualifierList()
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Colon - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 614
                    self.structDeclaratorList(0)


                self.state = 617
                self.match(CParser.Semi)
                pass
            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifierQualifierList" ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_specifierQualifierList)
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.typeSpecifier(0)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.specifierQualifierList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.typeQualifier()
                self.state = 628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.specifierQualifierList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaratorList" ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)



    def structDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.StructDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_structDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.structDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.StructDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclaratorList)
                    self.state = 635
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 636
                    self.match(CParser.Comma)
                    self.state = 637
                    self.structDeclarator() 
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarator" ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 644
                    self.declarator()


                self.state = 647
                self.match(CParser.Colon)
                self.state = 648
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(CParser.Enum)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 652
                    self.match(CParser.Identifier)


                self.state = 655
                self.match(CParser.LeftBrace)
                self.state = 656
                self.enumeratorList(0)
                self.state = 657
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(CParser.Enum)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 660
                    self.match(CParser.Identifier)


                self.state = 663
                self.match(CParser.LeftBrace)
                self.state = 664
                self.enumeratorList(0)
                self.state = 665
                self.match(CParser.Comma)
                self.state = 666
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 668
                self.match(CParser.Enum)
                self.state = 669
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CParser.EnumeratorContext,0)


        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorList" ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EnumeratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_enumeratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.enumerator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.EnumeratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorList)
                    self.state = 675
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 676
                    self.match(CParser.Comma)
                    self.state = 677
                    self.enumerator() 
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumerator)
        try:
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.enumerationConstant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.enumerationConstant()
                self.state = 685
                self.match(CParser.Assign)
                self.state = 686
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationConstant" ):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTypeSpecifier" ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(CParser.Atomic)
            self.state = 693
            self.match(CParser.LeftParen)
            self.state = 694
            self.typeName()
            self.state = 695
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CParser.Const, 0)

        def Restrict(self):
            return self.getToken(CParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifier" ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(CParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSpecifier" ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__7, CParser.T__8, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline) | (1 << CParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.gccAttributeSpecifier()
                pass
            elif token in [CParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.match(CParser.T__9)
                self.state = 702
                self.match(CParser.LeftParen)
                self.state = 703
                self.match(CParser.Identifier)
                self.state = 704
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentSpecifier" ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alignmentSpecifier)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.match(CParser.Alignas)
                self.state = 708
                self.match(CParser.LeftParen)
                self.state = 709
                self.typeName()
                self.state = 710
                self.match(CParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.match(CParser.Alignas)
                self.state = 713
                self.match(CParser.LeftParen)
                self.state = 714
                self.constantExpression()
                self.state = 715
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 719
                self.pointer()


            self.state = 722
            self.directDeclarator(0)
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 723
                    self.gccDeclaratorExtension() 
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectDeclarator" ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 730
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 731
                self.match(CParser.LeftParen)
                self.state = 732
                self.declarator()
                self.state = 733
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 735
                self.match(CParser.Identifier)
                self.state = 736
                self.match(CParser.Colon)
                self.state = 737
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 738
                self.match(CParser.LeftParen)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0) or _la==CParser.Identifier:
                    self.state = 739
                    self.typeSpecifier(0)


                self.state = 742
                self.pointer()
                self.state = 743
                self.directDeclarator(0)
                self.state = 744
                self.match(CParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 748
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 749
                        self.match(CParser.LeftBracket)
                        self.state = 751
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 750
                            self.typeQualifierList(0)


                        self.state = 754
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 753
                            self.assignmentExpression()


                        self.state = 756
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 757
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 758
                        self.match(CParser.LeftBracket)
                        self.state = 759
                        self.match(CParser.Static)
                        self.state = 761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 760
                            self.typeQualifierList(0)


                        self.state = 763
                        self.assignmentExpression()
                        self.state = 764
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 766
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 767
                        self.match(CParser.LeftBracket)
                        self.state = 768
                        self.typeQualifierList(0)
                        self.state = 769
                        self.match(CParser.Static)
                        self.state = 770
                        self.assignmentExpression()
                        self.state = 771
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 773
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 774
                        self.match(CParser.LeftBracket)
                        self.state = 776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 775
                            self.typeQualifierList(0)


                        self.state = 778
                        self.match(CParser.Star)
                        self.state = 779
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 780
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 781
                        self.match(CParser.LeftParen)
                        self.state = 782
                        self.parameterTypeList()
                        self.state = 783
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 785
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 786
                        self.match(CParser.LeftParen)
                        self.state = 788
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CParser.Identifier:
                            self.state = 787
                            self.identifierList(0)


                        self.state = 790
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccDeclaratorExtension" ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(CParser.T__10)
                self.state = 797
                self.match(CParser.LeftParen)
                self.state = 799 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 798
                    self.match(CParser.StringLiteral)
                    self.state = 801 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                self.state = 803
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeSpecifier" ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(CParser.T__11)
            self.state = 808
            self.match(CParser.LeftParen)
            self.state = 809
            self.match(CParser.LeftParen)
            self.state = 810
            self.gccAttributeList()
            self.state = 811
            self.match(CParser.RightParen)
            self.state = 812
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeList" ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.gccAttribute()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Comma:
                    self.state = 815
                    self.match(CParser.Comma)
                    self.state = 816
                    self.gccAttribute()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttribute" ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral, CParser.ComplexDefine, CParser.IncludeDirective, CParser.IfStartDirective, CParser.IfEndDirective, CParser.ExtendedIfDirective, CParser.UndefDirective, CParser.AsmBlock, CParser.LineAfterPreprocessing, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.RightParen - 59)) | (1 << (CParser.Comma - 59)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.LeftParen:
                    self.state = 826
                    self.match(CParser.LeftParen)
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 827
                        self.argumentExpressionList(0)


                    self.state = 830
                    self.match(CParser.RightParen)


                pass
            elif token in [CParser.RightParen, CParser.Comma]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedParenthesesBlock" ):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBracket) | (1 << CParser.RightBracket) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.IfStartDirective - 64)) | (1 << (CParser.IfEndDirective - 64)) | (1 << (CParser.ExtendedIfDirective - 64)) | (1 << (CParser.UndefDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                self.state = 841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Comma, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral, CParser.ComplexDefine, CParser.IncludeDirective, CParser.IfStartDirective, CParser.IfEndDirective, CParser.ExtendedIfDirective, CParser.UndefDirective, CParser.AsmBlock, CParser.LineAfterPreprocessing, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                    self.state = 836
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==CParser.LeftParen or _la==CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 837
                    self.match(CParser.LeftParen)
                    self.state = 838
                    self.nestedParenthesesBlock()
                    self.state = 839
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def Caret(self):
            return self.getToken(CParser.Caret, 0)

        def getRuleIndex(self):
            return CParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(CParser.Star)
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 847
                    self.typeQualifierList(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.match(CParser.Star)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 851
                    self.typeQualifierList(0)


                self.state = 854
                self.pointer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.match(CParser.Caret)
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.typeQualifierList(0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.match(CParser.Caret)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 860
                    self.typeQualifierList(0)


                self.state = 863
                self.pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifierList" ):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)



    def typeQualifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TypeQualifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_typeQualifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.typeQualifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TypeQualifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeQualifierList)
                    self.state = 869
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 870
                    self.typeQualifier() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(CParser.Ellipsis, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterTypeList" ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parameterTypeList)
        try:
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.parameterList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.parameterList(0)
                self.state = 878
                self.match(CParser.Comma)
                self.state = 879
                self.match(CParser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self):
            return self.getTypedRuleContext(CParser.ParameterDeclarationContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)



    def parameterList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ParameterListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_parameterList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.parameterDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ParameterListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterList)
                    self.state = 886
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 887
                    self.match(CParser.Comma)
                    self.state = 888
                    self.parameterDeclaration() 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_parameterDeclaration)
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.declarationSpecifiers()
                self.state = 895
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.declarationSpecifiers2()
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 898
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)



    def identifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.IdentifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_identifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(CParser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.IdentifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_identifierList)
                    self.state = 906
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 907
                    self.match(CParser.Comma)
                    self.state = 908
                    self.match(CParser.Identifier) 
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.specifierQualifierList()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) != 0):
                self.state = 915
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclarator" ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Star or _la==CParser.Caret:
                    self.state = 919
                    self.pointer()


                self.state = 922
                self.directAbstractDeclarator(0)
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 923
                        self.gccDeclaratorExtension() 
                    self.state = 928
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectAbstractDeclarator" ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 932
                self.match(CParser.LeftParen)
                self.state = 933
                self.abstractDeclarator()
                self.state = 934
                self.match(CParser.RightParen)
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 935
                        self.gccDeclaratorExtension() 
                    self.state = 940
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 2:
                self.state = 941
                self.match(CParser.LeftBracket)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 942
                    self.typeQualifierList(0)


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 945
                    self.assignmentExpression()


                self.state = 948
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 949
                self.match(CParser.LeftBracket)
                self.state = 950
                self.match(CParser.Static)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 951
                    self.typeQualifierList(0)


                self.state = 954
                self.assignmentExpression()
                self.state = 955
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 957
                self.match(CParser.LeftBracket)
                self.state = 958
                self.typeQualifierList(0)
                self.state = 959
                self.match(CParser.Static)
                self.state = 960
                self.assignmentExpression()
                self.state = 961
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 963
                self.match(CParser.LeftBracket)
                self.state = 964
                self.match(CParser.Star)
                self.state = 965
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 966
                self.match(CParser.LeftParen)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                    self.state = 967
                    self.parameterTypeList()


                self.state = 970
                self.match(CParser.RightParen)
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 971
                        self.gccDeclaratorExtension() 
                    self.state = 976
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1020
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 979
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 980
                        self.match(CParser.LeftBracket)
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 981
                            self.typeQualifierList(0)


                        self.state = 985
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 984
                            self.assignmentExpression()


                        self.state = 987
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 988
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 989
                        self.match(CParser.LeftBracket)
                        self.state = 990
                        self.match(CParser.Static)
                        self.state = 992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 991
                            self.typeQualifierList(0)


                        self.state = 994
                        self.assignmentExpression()
                        self.state = 995
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 997
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 998
                        self.match(CParser.LeftBracket)
                        self.state = 999
                        self.typeQualifierList(0)
                        self.state = 1000
                        self.match(CParser.Static)
                        self.state = 1001
                        self.assignmentExpression()
                        self.state = 1002
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1004
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1005
                        self.match(CParser.LeftBracket)
                        self.state = 1006
                        self.match(CParser.Star)
                        self.state = 1007
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1008
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1009
                        self.match(CParser.LeftParen)
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                            self.state = 1010
                            self.parameterTypeList()


                        self.state = 1013
                        self.match(CParser.RightParen)
                        self.state = 1017
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1014
                                self.gccDeclaratorExtension() 
                            self.state = 1019
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                        pass

             
                self.state = 1024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_initializer)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(CParser.LeftBrace)
                self.state = 1029
                self.initializerList(0)
                self.state = 1030
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1032
                self.match(CParser.LeftBrace)
                self.state = 1033
                self.initializerList(0)
                self.state = 1034
                self.match(CParser.Comma)
                self.state = 1035
                self.match(CParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def designation(self):
            return self.getTypedRuleContext(CParser.DesignationContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)



    def initializerList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InitializerListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_initializerList, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.LeftBracket or _la==CParser.Dot:
                self.state = 1040
                self.designation()


            self.state = 1043
            self.initializer()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InitializerListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerList)
                    self.state = 1045
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1046
                    self.match(CParser.Comma)
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CParser.LeftBracket or _la==CParser.Dot:
                        self.state = 1047
                        self.designation()


                    self.state = 1050
                    self.initializer() 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DesignationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignation" ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.designatorList(0)
            self.state = 1057
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self):
            return self.getTypedRuleContext(CParser.DesignatorContext,0)


        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorList" ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)



    def designatorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DesignatorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_designatorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.designator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DesignatorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_designatorList)
                    self.state = 1062
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1063
                    self.designator() 
                self.state = 1068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_designator)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(CParser.LeftBracket)
                self.state = 1070
                self.constantExpression()
                self.state = 1071
                self.match(CParser.RightBracket)
                pass
            elif token in [CParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(CParser.Dot)
                self.state = 1074
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(CParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticAssertDeclaration" ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(CParser.StaticAssert)
            self.state = 1078
            self.match(CParser.LeftParen)
            self.state = 1079
            self.constantExpression()
            self.state = 1080
            self.match(CParser.Comma)
            self.state = 1082 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1081
                self.match(CParser.StringLiteral)
                self.state = 1084 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.StringLiteral):
                    break

            self.state = 1086
            self.match(CParser.RightParen)
            self.state = 1087
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Colon)
            else:
                return self.getToken(CParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1092
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1093
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1094
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1095
                _la = self._input.LA(1)
                if not(_la==CParser.T__10 or _la==CParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1096
                _la = self._input.LA(1)
                if not(_la==CParser.T__13 or _la==CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1097
                self.match(CParser.LeftParen)
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1098
                    self.logicalOrExpression(0)
                    self.state = 1103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CParser.Comma:
                        self.state = 1099
                        self.match(CParser.Comma)
                        self.state = 1100
                        self.logicalOrExpression(0)
                        self.state = 1105
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Colon:
                    self.state = 1108
                    self.match(CParser.Colon)
                    self.state = 1117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 1109
                        self.logicalOrExpression(0)
                        self.state = 1114
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CParser.Comma:
                            self.state = 1110
                            self.match(CParser.Comma)
                            self.state = 1111
                            self.logicalOrExpression(0)
                            self.state = 1116
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1124
                self.match(CParser.RightParen)
                self.state = 1125
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Case(self):
            return self.getToken(CParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_labeledStatement)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.match(CParser.Identifier)
                self.state = 1129
                self.match(CParser.Colon)
                self.state = 1130
                self.statement()
                pass
            elif token in [CParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.match(CParser.Case)
                self.state = 1132
                self.constantExpression()
                self.state = 1133
                self.match(CParser.Colon)
                self.state = 1134
                self.statement()
                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1136
                self.match(CParser.Default)
                self.state = 1137
                self.match(CParser.Colon)
                self.state = 1138
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(CParser.LeftBrace)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1142
                self.blockItemList(0)


            self.state = 1145
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self):
            return self.getTypedRuleContext(CParser.BlockItemContext,0)


        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItemList" ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)



    def blockItemList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.BlockItemListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_blockItemList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.blockItem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1154
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.BlockItemListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_blockItemList)
                    self.state = 1150
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1151
                    self.blockItem() 
                self.state = 1156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItem" ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_blockItem)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1161
                self.expression(0)


            self.state = 1164
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CParser.If, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def Else(self):
            return self.getToken(CParser.Else, 0)

        def Switch(self):
            return self.getToken(CParser.Switch, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_selectionStatement)
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.match(CParser.If)
                self.state = 1167
                self.match(CParser.LeftParen)
                self.state = 1168
                self.expression(0)
                self.state = 1169
                self.match(CParser.RightParen)
                self.state = 1170
                self.statement()
                self.state = 1173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1171
                    self.match(CParser.Else)
                    self.state = 1172
                    self.statement()


                pass
            elif token in [CParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(CParser.Switch)
                self.state = 1176
                self.match(CParser.LeftParen)
                self.state = 1177
                self.expression(0)
                self.state = 1178
                self.match(CParser.RightParen)
                self.state = 1179
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Do(self):
            return self.getToken(CParser.Do, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_iterationStatement)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.match(CParser.While)
                self.state = 1184
                self.match(CParser.LeftParen)
                self.state = 1185
                self.expression(0)
                self.state = 1186
                self.match(CParser.RightParen)
                self.state = 1187
                self.statement()
                pass
            elif token in [CParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.match(CParser.Do)
                self.state = 1190
                self.statement()
                self.state = 1191
                self.match(CParser.While)
                self.state = 1192
                self.match(CParser.LeftParen)
                self.state = 1193
                self.expression(0)
                self.state = 1194
                self.match(CParser.RightParen)
                self.state = 1195
                self.match(CParser.Semi)
                pass
            elif token in [CParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1197
                self.match(CParser.For)
                self.state = 1198
                self.match(CParser.LeftParen)
                self.state = 1199
                self.forCondition()
                self.state = 1200
                self.match(CParser.RightParen)
                self.state = 1201
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext,0)


        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Semi)
            else:
                return self.getToken(CParser.Semi, i)

        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForCondition" ):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)




    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1205
                self.forDeclaration()
                self.state = 1206
                self.match(CParser.Semi)
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1207
                    self.forExpression(0)


                self.state = 1210
                self.match(CParser.Semi)
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1211
                    self.forExpression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1214
                    self.expression(0)


                self.state = 1217
                self.match(CParser.Semi)
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1218
                    self.forExpression(0)


                self.state = 1221
                self.match(CParser.Semi)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1222
                    self.forExpression(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForDeclaration" ):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forDeclaration)
        try:
            self.state = 1231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.declarationSpecifiers()
                self.state = 1228
                self.initDeclaratorList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.declarationSpecifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def forExpression(self):
            return self.getTypedRuleContext(CParser.ForExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)



    def forExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ForExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_forExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ForExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_forExpression)
                    self.state = 1236
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1237
                    self.match(CParser.Comma)
                    self.state = 1238
                    self.assignmentExpression() 
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Continue(self):
            return self.getToken(CParser.Continue, 0)

        def Break(self):
            return self.getToken(CParser.Break, 0)

        def Return(self):
            return self.getToken(CParser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.match(CParser.Goto)
                self.state = 1245
                self.match(CParser.Identifier)
                self.state = 1246
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1247
                self.match(CParser.Continue)
                self.state = 1248
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1249
                self.match(CParser.Break)
                self.state = 1250
                self.match(CParser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1251
                self.match(CParser.Return)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1252
                    self.expression(0)


                self.state = 1255
                self.match(CParser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1256
                self.match(CParser.Goto)
                self.state = 1257
                self.unaryExpression()
                self.state = 1258
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)) | (1 << (CParser.ComplexDefine - 75)) | (1 << (CParser.IncludeDirective - 75)) | (1 << (CParser.IfStartDirective - 75)) | (1 << (CParser.IfEndDirective - 75)) | (1 << (CParser.ExtendedIfDirective - 75)) | (1 << (CParser.UndefDirective - 75)))) != 0):
                self.state = 1262
                self.translationUnit(0)


            self.state = 1265
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self):
            return self.getTypedRuleContext(CParser.ExternalDeclarationContext,0)


        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)



    def translationUnit(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TranslationUnitContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_translationUnit, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.externalDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TranslationUnitContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_translationUnit)
                    self.state = 1270
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1271
                    self.externalDeclaration() 
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def directive(self):
            return self.getTypedRuleContext(CParser.DirectiveContext,0)


        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDeclaration" ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_externalDeclaration)
        try:
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1279
                self.match(CParser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1280
                self.directive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1283
                self.declarationSpecifiers()


            self.state = 1286
            self.declarator()
            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                self.state = 1287
                self.declarationList(0)


            self.state = 1290
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationList" ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)



    def declarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_declarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationList)
                    self.state = 1295
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1296
                    self.declaration() 
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ComplexDefine(self):
            return self.getToken(CParser.ComplexDefine, 0)

        def IncludeDirective(self):
            return self.getToken(CParser.IncludeDirective, 0)

        def IfStartDirective(self):
            return self.getToken(CParser.IfStartDirective, 0)

        def IfEndDirective(self):
            return self.getToken(CParser.IfEndDirective, 0)

        def ExtendedIfDirective(self):
            return self.getToken(CParser.ExtendedIfDirective, 0)

        def UndefDirective(self):
            return self.getToken(CParser.UndefDirective, 0)

        def getRuleIndex(self):
            return CParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirective" ):
                return visitor.visitDirective(self)
            else:
                return visitor.visitChildren(self)




    def directive(self):

        localctx = CParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            _la = self._input.LA(1)
            if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (CParser.ComplexDefine - 109)) | (1 << (CParser.IncludeDirective - 109)) | (1 << (CParser.IfStartDirective - 109)) | (1 << (CParser.IfEndDirective - 109)) | (1 << (CParser.ExtendedIfDirective - 109)) | (1 << (CParser.UndefDirective - 109)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.genericAssocList_sempred
        self._predicates[4] = self.postfixExpression_sempred
        self._predicates[5] = self.argumentExpressionList_sempred
        self._predicates[9] = self.multiplicativeExpression_sempred
        self._predicates[10] = self.additiveExpression_sempred
        self._predicates[11] = self.shiftExpression_sempred
        self._predicates[12] = self.relationalExpression_sempred
        self._predicates[13] = self.equalityExpression_sempred
        self._predicates[14] = self.andExpression_sempred
        self._predicates[15] = self.exclusiveOrExpression_sempred
        self._predicates[16] = self.inclusiveOrExpression_sempred
        self._predicates[17] = self.logicalAndExpression_sempred
        self._predicates[18] = self.logicalOrExpression_sempred
        self._predicates[22] = self.expression_sempred
        self._predicates[28] = self.initDeclaratorList_sempred
        self._predicates[31] = self.typeSpecifier_sempred
        self._predicates[34] = self.structDeclarationList_sempred
        self._predicates[37] = self.structDeclaratorList_sempred
        self._predicates[40] = self.enumeratorList_sempred
        self._predicates[48] = self.directDeclarator_sempred
        self._predicates[55] = self.typeQualifierList_sempred
        self._predicates[57] = self.parameterList_sempred
        self._predicates[59] = self.identifierList_sempred
        self._predicates[62] = self.directAbstractDeclarator_sempred
        self._predicates[65] = self.initializerList_sempred
        self._predicates[67] = self.designatorList_sempred
        self._predicates[73] = self.blockItemList_sempred
        self._predicates[80] = self.forExpression_sempred
        self._predicates[83] = self.translationUnit_sempred
        self._predicates[86] = self.declarationList_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def genericAssocList_sempred(self, localctx:GenericAssocListContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

    def argumentExpressionList_sempred(self, localctx:ArgumentExpressionListContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx:AndExpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx:ExclusiveOrExpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx:InclusiveOrExpressionContext, predIndex:int):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def logicalOrExpression_sempred(self, localctx:LogicalOrExpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def initDeclaratorList_sempred(self, localctx:InitDeclaratorListContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def structDeclarationList_sempred(self, localctx:StructDeclarationListContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def structDeclaratorList_sempred(self, localctx:StructDeclaratorListContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def enumeratorList_sempred(self, localctx:EnumeratorListContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 3)
         

    def typeQualifierList_sempred(self, localctx:TypeQualifierListContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def parameterList_sempred(self, localctx:ParameterListContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def identifierList_sempred(self, localctx:IdentifierListContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def initializerList_sempred(self, localctx:InitializerListContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def designatorList_sempred(self, localctx:DesignatorListContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def blockItemList_sempred(self, localctx:BlockItemListContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def forExpression_sempred(self, localctx:ForExpressionContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def translationUnit_sempred(self, localctx:TranslationUnitContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def declarationList_sempred(self, localctx:DeclarationListContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         




